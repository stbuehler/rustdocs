var searchIndex = {};
searchIndex["cidr"] = {"doc":"This library provides types to represent an IP network (`Cidr`) or\nan IP host withing a network (`Inet`)","items":[[3,"Ipv4Cidr","cidr","`Cidr` type representing an IPv4 network",null,null],[3,"Ipv6Cidr","","`Cidr` type representing an IPv6 network",null,null],[3,"NetworkLengthTooLongError","","Error returned when the network length was longer than the address",null,null],[3,"Ipv4Inet","","`Inet` type representing an IPv4 host within a network",null,null],[3,"Ipv6Inet","","`Inet` type representing an IPv6 host within a network",null,null],[3,"InetIterator","","Iterator type to iterate over a list of IP addresses in a network",null,null],[4,"IpCidr","","`Cidr` type representing either an IPv4 or an IPv6 network",null,null],[13,"V4","","IPv4 network",0,null],[13,"V6","","IPv6 network",0,null],[4,"NetworkParseError","","Error type returned when parsing IP networks",null,null],[13,"InvalidHostPart","","The host part wasn&#39;t zero but should have been. The `Cidr` types\nrequire that you use the first address in the network (and the\nnetwork length) to represent the address, but it wasn&#39;t the\nfirst address.",1,null],[13,"AddrParseError","","Failed to parse the address",1,null],[13,"NetworkLengthParseError","","Failed to parse the network length",1,null],[13,"NetworkLengthTooLongError","","The network length was not valid (but was successfully parsed)",1,null],[4,"Family","","Represents the type of an IP address",null,null],[13,"Ipv4","","IPv4",2,null],[13,"Ipv6","","IPv6",2,null],[4,"IpInet","","`Inet` type representing either an IPv4 or an IPv6 host within a\nnetwork",null,null],[13,"V4","","IPv4 host within network",3,null],[13,"V6","","IPv6 host within network",3,null],[11,"is_ipv4","","Whether representing an IPv4 network",0,null],[11,"is_ipv6","","Whether representing an IPv6 network",0,null],[11,"new","","",0,null],[11,"new_host","","",0,null],[11,"first_address","","",0,null],[11,"first","","",0,null],[11,"last_address","","",0,null],[11,"last","","",0,null],[11,"network_length","","",0,null],[11,"family","","",0,null],[11,"mask","","",0,null],[11,"contains","","",0,null],[11,"fmt","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"ipv4cidr"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"ipv6cidr"}],"output":{"name":"self"}}],[11,"new","","",4,null],[11,"new_host","","",4,null],[11,"first_address","","",4,null],[11,"first","","",4,null],[11,"last_address","","",4,null],[11,"last","","",4,null],[11,"network_length","","",4,null],[11,"family","","",4,null],[11,"mask","","",4,null],[11,"contains","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"partial_cmp","","",4,null],[11,"cmp","","",4,null],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","",5,null],[11,"new_host","","",5,null],[11,"first_address","","",5,null],[11,"first","","",5,null],[11,"last_address","","",5,null],[11,"last","","",5,null],[11,"network_length","","",5,null],[11,"family","","",5,null],[11,"mask","","",5,null],[11,"contains","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"partial_cmp","","",5,null],[11,"cmp","","",5,null],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"hash","","",4,null],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"hash","","",5,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"cmp","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"hash","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"description","","",6,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"from","","",1,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"parseinterror"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"networklengthtoolongerror"}],"output":{"name":"self"}}],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"partial_cmp","","",2,null],[11,"cmp","","",2,null],[11,"hash","","",2,null],[11,"fmt","","",2,null],[11,"len","","The length of an address in the given family",2,null],[11,"unspecified_address","","The &quot;unspecified&quot; address (all zero) of the given family",2,null],[11,"loopback_address","","The &quot;loopback&quot; address (`127.0.0.1` or `::1`) of the given family",2,null],[11,"is_ipv4","","Whether representing an IPv4 network",3,null],[11,"is_ipv6","","Whether representing an IPv6 network",3,null],[11,"new","","",3,null],[11,"new_host","","",3,null],[11,"next","","",3,null],[11,"network","","",3,null],[11,"address","","",3,null],[11,"first_address","","",3,null],[11,"first","","",3,null],[11,"last_address","","",3,null],[11,"last","","",3,null],[11,"network_length","","",3,null],[11,"family","","",3,null],[11,"mask","","",3,null],[11,"contains","","",3,null],[11,"fmt","","",3,null],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"ipv4inet"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"ipv6inet"}],"output":{"name":"self"}}],[11,"new","","",7,null],[11,"new_host","","",7,null],[11,"next","","",7,null],[11,"network","","",7,null],[11,"address","","",7,null],[11,"first_address","","",7,null],[11,"first","","",7,null],[11,"last_address","","",7,null],[11,"last","","",7,null],[11,"network_length","","",7,null],[11,"family","","",7,null],[11,"mask","","",7,null],[11,"contains","","",7,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","",8,null],[11,"new_host","","",8,null],[11,"next","","",8,null],[11,"network","","",8,null],[11,"address","","",8,null],[11,"first_address","","",8,null],[11,"first","","",8,null],[11,"last_address","","",8,null],[11,"last","","",8,null],[11,"network_length","","",8,null],[11,"family","","",8,null],[11,"mask","","",8,null],[11,"contains","","",8,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"partial_cmp","","",7,null],[11,"lt","","",7,null],[11,"le","","",7,null],[11,"gt","","",7,null],[11,"ge","","",7,null],[11,"cmp","","",7,null],[11,"hash","","",7,null],[11,"clone","","",8,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"partial_cmp","","",8,null],[11,"lt","","",8,null],[11,"le","","",8,null],[11,"gt","","",8,null],[11,"ge","","",8,null],[11,"cmp","","",8,null],[11,"hash","","",8,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"partial_cmp","","",3,null],[11,"lt","","",3,null],[11,"le","","",3,null],[11,"gt","","",3,null],[11,"ge","","",3,null],[11,"cmp","","",3,null],[11,"hash","","",3,null],[11,"fmt","","",3,null],[11,"next","","",9,null],[8,"Cidr","","Types implementing Cidr represent IP networks.  An IP network in\nthis case is a set of IP addresses which share a common prefix (when\nviewed as a bitstring).  The length of this prefix is called\n`network_length`.",null,null],[16,"Address","","Type for the underlying address (`IpAddr`, `Ipv4Addr` or\n`Ipv6Addr`).",10,null],[16,"Inet","","Corresponding `Inet` type (representing an address + a network\ncontaining it)",10,null],[10,"new","","Create new network from address and prefix length.  If the\nnetwork length exceeds the address length or the address is not\nthe first address in the network (&quot;host part not zero&quot;) an\nerror is returned.",10,null],[10,"new_host","","Create a network containing a single address (network length = address length).",10,null],[11,"iter","","Iterate over all addresses in the range.  With IPv6 addresses\nthis can produce really long iterations (up to 2^128 addresses).",10,null],[10,"first_address","","first address in the network as plain address",10,null],[10,"first","","first address in the network",10,null],[10,"last_address","","last address in the network as plain address",10,null],[10,"last","","last address in the network",10,null],[10,"network_length","","length in bits of the shared prefix of the contained addresses",10,null],[10,"family","","IP family of the contained address (`Ipv4` or `Ipv6`).",10,null],[10,"mask","","network mask: an pseudo address which has the first `network\nlength` bits set to 1 and the remaining to 0.",10,null],[10,"contains","","check whether an address is contained in the network",10,null],[8,"Inet","","Types implementing Inet represent IP hosts within networks.",null,null],[16,"Address","","Type for the underlying address (`IpAddr`, `Ipv4Addr` or\n`Ipv6Addr`).",11,null],[16,"Cidr","","Corresponding `Cidr` type (representing only the network)",11,null],[10,"new","","Create new host within a network from address and prefix length.\nIf the network length exceeds the address length an error is\nreturned.",11,null],[10,"new_host","","Create a network containing a single address as host and the\nnetwork (network length = address length).",11,null],[10,"next","","increments host part (without changing the network part); returns true on wrap around",11,null],[10,"network","","network (i.e. drops the host information)",11,null],[10,"address","","the host",11,null],[10,"first_address","","first address in the network as plain address",11,null],[10,"first","","first address in the network",11,null],[10,"last_address","","last address in the network as plain address",11,null],[10,"last","","last address in the network",11,null],[10,"network_length","","length in bits of the shared prefix of the contained addresses",11,null],[10,"family","","IP family of the contained address (`Ipv4` or `Ipv6`).",11,null],[10,"mask","","network mask: an pseudo address which has the first `network\nlength` bits set to 1 and the remaining to 0.",11,null],[10,"contains","","check whether an address is contained in the network",11,null],[11,"iter","","Iterate over all addresses in the range.  With IPv6 addresses\nthis can produce really long iterations (up to 2^128 addresses).",10,null]],"paths":[[4,"IpCidr"],[4,"NetworkParseError"],[4,"Family"],[4,"IpInet"],[3,"Ipv4Cidr"],[3,"Ipv6Cidr"],[3,"NetworkLengthTooLongError"],[3,"Ipv4Inet"],[3,"Ipv6Inet"],[3,"InetIterator"],[8,"Cidr"],[8,"Inet"]]};
initSearch(searchIndex);
