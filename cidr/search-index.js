var searchIndex = {};
searchIndex["bitstring"] = {"doc":"This crate provides traits to treat various objects as bit strings.","items":[[3,"BitLengthString","bitstring","Extend a `FixedBitString` to a `BitString` by also storing a length.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bitlengthstring"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"new","","Create new dynamic-length bit string from fixed bit string and a length.",0,{"inputs":[{"name":"w"},{"name":"usize"}],"output":{"name":"self"}}],[11,"contains","","check whether another bit string `bits` is prefixed by `self`",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"bool"}}],[11,"bits","","get read access to the bits",0,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"len","","length of bit string (same as `BitString::len()`)",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"set","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"flip","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"len","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clip","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"append","","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"null","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"shared_prefix_len","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"usize"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[0,"bit_string","","contains everything related to the `BitString` trait.",null,null],[8,"BitString","bitstring::bit_string","A bit string with variable (but possibly limited) length.",null,null],[10,"get","","Get the `ndx`th bit.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"set","","Set the `ndx`th bit to `bit`.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[10,"flip","","Flips the `ndx`th bit.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"len","","Current length of the bit string in bits.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"clip","","Set current length to `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"append","","Append a bit.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"null","","Create a new zero-length bit string.",1,{"inputs":[],"output":{"name":"self"}}],[11,"shared_prefix_len","","Length of the longest shared prefix of two bit strings.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"usize"}}],[11,"shared_prefix","","Longest shared prefix of two bit strings.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"subset_cmp","","Partial ordering on bit strings.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lexicographic_cmp","","Lexicographic ordering on bit strings.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[0,"fixed_bit_string","bitstring","contains everything related to the `FixedBitString` trait.",null,null],[3,"Iter","bitstring::fixed_bit_string","Iterator to iterate over all `FixedBitString` values with a shared prefix.",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FixedBitString","","A bit string with fixed length.",null,null],[10,"inc","","Treat bit string as integer, where bit 0 is the most significant bit.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"iter","","Iterate through all bit strings until `inc` overflows.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"iter"}}],[10,"len","","Length of the bit string in bits.",3,{"inputs":[],"output":{"name":"usize"}}],[10,"get","","Get the `ndx`th bit.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"set","","Set the `ndx`th bit to `bit`.",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"on","","Set the `ndx`th bit to `true`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"off","","Set the `ndx`th bit to `false`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"flip","","Flips the `ndx`th bit.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shared_prefix_len","","Length of the longest shared prefix of two bit strings.",3,{"inputs":[{"name":"self"},{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[10,"set_false_from","","Set all bits in [ndx..] to `false`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"is_false_from","","Whether all bits in [ndx..] are `false`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"set_true_from","","Set all bits in [ndx..] to `true`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"is_true_from","","Whether all bits in [ndx..] are `true`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"new_all_false","","New bit string with all bits set to `false`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"new_all_true","","New bit string with all bits set to `true`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"contains","","check whether another bit string `other` shares the first `prefix` bits with `self`",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"self"}],"output":{"name":"bool"}}],[0,"utils","bitstring","utils to support implementing bit string traits",null,null],[8,"BigEndianBitString","bitstring::utils","Generic helper methods to treat [u*]-slices as big endian bit strings.",null,null],[11,"elembits","","bits in a single element",4,{"inputs":[],"output":{"name":"usize"}}],[10,"mask","","integer with single bit set. bit 0 is the highest bit (big endian).  Wraps at `Self::elembits()`.",4,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"inc","","increment from right; don't touch first `prefix` bits; returns true on overflow",4,null],[10,"get","","Get the `ndx`th bit.",4,null],[11,"set","","Set the `ndx`th bit to `bit`.",4,null],[10,"on","","Set the `ndx`th bit to `true`.",4,null],[10,"off","","Set the `ndx`th bit to `false`.",4,null],[10,"flip","","Flips the `ndx`th bit.",4,null],[10,"shared_prefix_len","","Length of the longest shared prefix of two bit strings.",4,null],[10,"set_false_from","","Set all bits from [ndx..] to `false`.",4,null],[10,"is_false_from","","Whether all bits from [ndx..] are `false`.",4,null],[10,"set_true_from","","Set all bits from [ndx..] to `true`.",4,null],[10,"is_true_from","","Whether all bits from [ndx..] are `true`.",4,null],[10,"contains","","check whether another bit string `other` shares the first `prefix` bits with `self`",4,null],[8,"BitString","bitstring","A bit string with variable (but possibly limited) length.",null,null],[10,"get","","Get the `ndx`th bit.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"set","","Set the `ndx`th bit to `bit`.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[10,"flip","","Flips the `ndx`th bit.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"len","","Current length of the bit string in bits.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"clip","","Set current length to `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"append","","Append a bit.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"null","","Create a new zero-length bit string.",1,{"inputs":[],"output":{"name":"self"}}],[11,"shared_prefix_len","bitstring::bit_string","Length of the longest shared prefix of two bit strings.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"usize"}}],[11,"shared_prefix","","Longest shared prefix of two bit strings.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"subset_cmp","","Partial ordering on bit strings.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lexicographic_cmp","","Lexicographic ordering on bit strings.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"FixedBitString","bitstring","A bit string with fixed length.",null,null],[10,"inc","","Treat bit string as integer, where bit 0 is the most significant bit.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"iter","bitstring::fixed_bit_string","Iterate through all bit strings until `inc` overflows.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"iter"}}],[10,"len","bitstring","Length of the bit string in bits.",3,{"inputs":[],"output":{"name":"usize"}}],[10,"get","","Get the `ndx`th bit.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"set","","Set the `ndx`th bit to `bit`.",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"on","bitstring::fixed_bit_string","Set the `ndx`th bit to `true`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"off","","Set the `ndx`th bit to `false`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"flip","","Flips the `ndx`th bit.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shared_prefix_len","","Length of the longest shared prefix of two bit strings.",3,{"inputs":[{"name":"self"},{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[10,"set_false_from","bitstring","Set all bits in [ndx..] to `false`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"is_false_from","","Whether all bits in [ndx..] are `false`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"set_true_from","","Set all bits in [ndx..] to `true`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"is_true_from","","Whether all bits in [ndx..] are `true`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"new_all_false","","New bit string with all bits set to `false`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"new_all_true","","New bit string with all bits set to `true`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"contains","","check whether another bit string `other` shares the first `prefix` bits with `self`",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"self"}],"output":{"name":"bool"}}],[11,"shared_prefix_len","bitstring::bit_string","Length of the longest shared prefix of two bit strings.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"usize"}}],[11,"shared_prefix","","Longest shared prefix of two bit strings.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"subset_cmp","","Partial ordering on bit strings.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lexicographic_cmp","","Lexicographic ordering on bit strings.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"iter","bitstring::fixed_bit_string","Iterate through all bit strings until `inc` overflows.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"iter"}}],[11,"on","","Set the `ndx`th bit to `true`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"off","","Set the `ndx`th bit to `false`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"flip","","Flips the `ndx`th bit.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shared_prefix_len","","Length of the longest shared prefix of two bit strings.",3,{"inputs":[{"name":"self"},{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"elembits","bitstring::utils","bits in a single element",4,{"inputs":[],"output":{"name":"usize"}}],[11,"set","","Set the `ndx`th bit to `bit`.",4,null]],"paths":[[3,"BitLengthString"],[8,"BitString"],[3,"Iter"],[8,"FixedBitString"],[8,"BigEndianBitString"]]};
searchIndex["cidr"] = {"doc":"This library provides types to represent an IP network (`Cidr`) or an IP host withing a network (`Inet`)","items":[[3,"Ipv4Cidr","cidr","`Cidr` type representing an IPv4 network",null,null],[3,"Ipv6Cidr","","`Cidr` type representing an IPv6 network",null,null],[3,"NetworkLengthTooLongError","","Error returned when the network length was longer than the address",null,null],[3,"Ipv4Inet","","`Inet` type representing an IPv4 host within a network",null,null],[3,"Ipv6Inet","","`Inet` type representing an IPv6 host within a network",null,null],[3,"InetIterator","","Iterator type to iterate over a list of IP addresses in a network",null,null],[4,"AnyIpCidr","","Represents either an IPv4 or an IPv6 network or \"any\".",null,null],[13,"Any","","\"any\" network containing all IPv4 and IPv6 addresses",0,null],[13,"V4","","IPv4 network",0,null],[13,"V6","","IPv6 network",0,null],[4,"IpCidr","","`Cidr` type representing either an IPv4 or an IPv6 network",null,null],[13,"V4","","IPv4 network",1,null],[13,"V6","","IPv6 network",1,null],[4,"NetworkParseError","","Error type returned when parsing IP networks",null,null],[13,"InvalidHostPart","","The host part wasn't zero but should have been. The `Cidr` types require that you use the first address in the network (and the network length) to represent the address, but it wasn't the first address.",2,null],[13,"AddrParseError","","Failed to parse the address",2,null],[13,"NetworkLengthParseError","","Failed to parse the network length",2,null],[13,"NetworkLengthTooLongError","","The network length was not valid (but was successfully parsed)",2,null],[4,"Family","","Represents the type of an IP address",null,null],[13,"Ipv4","","IPv4",3,null],[13,"Ipv6","","IPv6",3,null],[4,"IpInet","","`Inet` type representing either an IPv4 or an IPv6 host within a network",null,null],[13,"V4","","IPv4 host within network",4,null],[13,"V6","","IPv6 host within network",4,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"anyipcidr"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"anyipcidr"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"anyipcidr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"anyipcidr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"anyipcidr"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"anyipcidr"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"anyipcidr"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"anyipcidr"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"anyipcidr"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_any","","Whether representing any address",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipv4","","Whether representing an IPv4 network",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipv6","","Whether representing an IPv6 network",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Create new network from address and prefix length.  If the network length exceeds the address length or the address is not the first address in the network (\"host part not zero\") an error is returned.",0,{"inputs":[{"name":"ipaddr"},{"name":"u8"}],"output":{"generics":["networkparseerror"],"name":"result"}}],[11,"new_host","","Create a network containing a single address (network length = address length).",0,{"inputs":[{"name":"ipaddr"}],"output":{"name":"self"}}],[11,"first_address","","first address in the network as plain address",0,{"inputs":[{"name":"self"}],"output":{"generics":["ipaddr"],"name":"option"}}],[11,"first","","first address in the network",0,{"inputs":[{"name":"self"}],"output":{"generics":["ipinet"],"name":"option"}}],[11,"last_address","","last address in the network as plain address",0,{"inputs":[{"name":"self"}],"output":{"generics":["ipaddr"],"name":"option"}}],[11,"last","","last address in the network",0,{"inputs":[{"name":"self"}],"output":{"generics":["ipinet"],"name":"option"}}],[11,"network_length","","length in bits of the shared prefix of the contained addresses",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"family","","IP family of the contained address (`Ipv4` or `Ipv6`).",0,{"inputs":[{"name":"self"}],"output":{"generics":["family"],"name":"option"}}],[11,"mask","","network mask: an pseudo address which has the first `network length` bits set to 1 and the remaining to 0.",0,{"inputs":[{"name":"self"}],"output":{"generics":["ipaddr"],"name":"option"}}],[11,"contains","","check whether an address is contained in the network",0,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["ipcidr"],"name":"option"}}],[11,"from","","",0,{"inputs":[{"generics":["ipcidr"],"name":"option"}],"output":{"name":"self"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["anyipcidr","networkparseerror"],"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"ipcidr"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"ipv4cidr"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"ipv6cidr"}],"output":{"name":"self"}}],[11,"get","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"set","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"flip","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"len","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clip","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"append","","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"null","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"shared_prefix_len","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"usize"}}],[11,"is_ipv4","","Whether representing an IPv4 network",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipv6","","Whether representing an IPv6 network",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","",1,null],[11,"new_host","","",1,null],[11,"first_address","","",1,null],[11,"first","","",1,null],[11,"last_address","","",1,null],[11,"last","","",1,null],[11,"network_length","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"family","","",1,{"inputs":[{"name":"self"}],"output":{"name":"family"}}],[11,"mask","","",1,null],[11,"contains","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"generics":["ipcidr","networkparseerror"],"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"ipv4cidr"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"ipv6cidr"}],"output":{"name":"self"}}],[11,"get","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"set","","",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"flip","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"len","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clip","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"append","","",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"null","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"shared_prefix_len","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",5,null],[11,"new_host","","",5,null],[11,"first_address","","",5,null],[11,"first","","",5,null],[11,"last_address","","",5,null],[11,"last","","",5,null],[11,"network_length","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"family","","",5,{"inputs":[{"name":"self"}],"output":{"name":"family"}}],[11,"mask","","",5,null],[11,"contains","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"generics":["ipv4cidr","networkparseerror"],"name":"result"}}],[11,"get","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"set","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"flip","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"len","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clip","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"append","","",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"null","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"shared_prefix_len","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",6,null],[11,"new_host","","",6,null],[11,"first_address","","",6,null],[11,"first","","",6,null],[11,"last_address","","",6,null],[11,"last","","",6,null],[11,"network_length","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"family","","",6,{"inputs":[{"name":"self"}],"output":{"name":"family"}}],[11,"mask","","",6,null],[11,"contains","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"generics":["ipv6cidr","networkparseerror"],"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"ipv4cidr"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"ipv4cidr"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"ipv4cidr"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"ipv6cidr"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"ipv6cidr"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"ipv6cidr"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"ipcidr"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"ipcidr"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"ipcidr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"ipcidr"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"ipcidr"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"ipcidr"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"ipcidr"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"ipcidr"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"ipcidr"}],"output":{"name":"ordering"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"networklengthtoolongerror"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"networklengthtoolongerror"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"networklengthtoolongerror"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"networkparseerror"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"networkparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"networkparseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"parseinterror"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"networklengthtoolongerror"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"family"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"family"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"family"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"family"}],"output":{"name":"ordering"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","The length of an address in the given family",3,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"unspecified_address","","The \"unspecified\" address (all zero) of the given family",3,{"inputs":[{"name":"self"}],"output":{"name":"ipaddr"}}],[11,"loopback_address","","The \"loopback\" address (`127.0.0.1` or `::1`) of the given family",3,{"inputs":[{"name":"self"}],"output":{"name":"ipaddr"}}],[11,"is_ipv4","","Whether representing an IPv4 network",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ipv6","","Whether representing an IPv6 network",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","",4,null],[11,"new_host","","",4,null],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"network","","",4,null],[11,"address","","",4,null],[11,"first_address","","",4,null],[11,"first","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"last_address","","",4,null],[11,"last","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"network_length","","",4,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"family","","",4,{"inputs":[{"name":"self"}],"output":{"name":"family"}}],[11,"mask","","",4,null],[11,"contains","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"generics":["ipinet","networkparseerror"],"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"ipv4inet"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"ipv6inet"}],"output":{"name":"self"}}],[11,"get","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"set","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"flip","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"len","","",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clip","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"append","","",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"null","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"shared_prefix_len","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",8,null],[11,"new_host","","",8,null],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"network","","",8,null],[11,"address","","",8,null],[11,"first_address","","",8,null],[11,"first","","",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"last_address","","",8,null],[11,"last","","",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"network_length","","",8,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"family","","",8,{"inputs":[{"name":"self"}],"output":{"name":"family"}}],[11,"mask","","",8,null],[11,"contains","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"generics":["ipv4inet","networkparseerror"],"name":"result"}}],[11,"get","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"set","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"flip","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"len","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clip","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"append","","",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"null","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"shared_prefix_len","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",9,null],[11,"new_host","","",9,null],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"network","","",9,null],[11,"address","","",9,null],[11,"first_address","","",9,null],[11,"first","","",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"last_address","","",9,null],[11,"last","","",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"network_length","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"family","","",9,{"inputs":[{"name":"self"}],"output":{"name":"family"}}],[11,"mask","","",9,null],[11,"contains","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"generics":["ipv6inet","networkparseerror"],"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ipv4inet"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"ipv4inet"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"ipv4inet"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"ipv4inet"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"ipv4inet"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"ipv4inet"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"ipv4inet"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"ipv4inet"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"ipv4inet"}],"output":{"name":"ordering"}}],[11,"hash","","",8,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6inet"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"ipv6inet"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"ipv6inet"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"ipv6inet"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"ipv6inet"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"ipv6inet"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"ipv6inet"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"ipv6inet"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"ipv6inet"}],"output":{"name":"ordering"}}],[11,"hash","","",9,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"ipinet"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"ipinet"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"ipinet"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"ipinet"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"ipinet"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"ipinet"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"ipinet"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"ipinet"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"ipinet"}],"output":{"name":"ordering"}}],[11,"hash","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Cidr","","Types implementing Cidr represent IP networks.  An IP network in this case is a set of IP addresses which share a common prefix (when viewed as a bitstring).  The length of this prefix is called `network_length`.",null,null],[16,"Address","","Type for the underlying address (`IpAddr`, `Ipv4Addr` or `Ipv6Addr`).",11,null],[16,"Inet","","Corresponding `Inet` type (representing an address + a network containing it)",11,null],[10,"new","","Create new network from address and prefix length.  If the network length exceeds the address length or the address is not the first address in the network (\"host part not zero\") an error is returned.",11,null],[10,"new_host","","Create a network containing a single address (network length = address length).",11,null],[11,"iter","","Iterate over all addresses in the range.  With IPv6 addresses this can produce really long iterations (up to 2128 addresses).",11,{"inputs":[{"name":"self"}],"output":{"name":"inetiterator"}}],[10,"first_address","","first address in the network as plain address",11,null],[10,"first","","first address in the network",11,null],[10,"last_address","","last address in the network as plain address",11,null],[10,"last","","last address in the network",11,null],[10,"network_length","","length in bits of the shared prefix of the contained addresses",11,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[10,"family","","IP family of the contained address (`Ipv4` or `Ipv6`).",11,{"inputs":[{"name":"self"}],"output":{"name":"family"}}],[10,"mask","","network mask: an pseudo address which has the first `network length` bits set to 1 and the remaining to 0.",11,null],[10,"contains","","check whether an address is contained in the network",11,null],[8,"Inet","","Types implementing Inet represent IP hosts within networks.",null,null],[16,"Address","","Type for the underlying address (`IpAddr`, `Ipv4Addr` or `Ipv6Addr`).",12,null],[16,"Cidr","","Corresponding `Cidr` type (representing only the network)",12,null],[10,"new","","Create new host within a network from address and prefix length. If the network length exceeds the address length an error is returned.",12,null],[10,"new_host","","Create a network containing a single address as host and the network (network length = address length).",12,null],[10,"next","","increments host part (without changing the network part); returns true on wrap around",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"network","","network (i.e. drops the host information)",12,null],[10,"address","","the host",12,null],[10,"first_address","","first address in the network as plain address",12,null],[10,"first","","first address in the network",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"last_address","","last address in the network as plain address",12,null],[10,"last","","last address in the network",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"network_length","","length in bits of the shared prefix of the contained addresses",12,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[10,"family","","IP family of the contained address (`Ipv4` or `Ipv6`).",12,{"inputs":[{"name":"self"}],"output":{"name":"family"}}],[10,"mask","","network mask: an pseudo address which has the first `network length` bits set to 1 and the remaining to 0.",12,null],[10,"contains","","check whether an address is contained in the network",12,null],[11,"iter","","Iterate over all addresses in the range.  With IPv6 addresses this can produce really long iterations (up to 2128 addresses).",11,{"inputs":[{"name":"self"}],"output":{"name":"inetiterator"}}]],"paths":[[4,"AnyIpCidr"],[4,"IpCidr"],[4,"NetworkParseError"],[4,"Family"],[4,"IpInet"],[3,"Ipv4Cidr"],[3,"Ipv6Cidr"],[3,"NetworkLengthTooLongError"],[3,"Ipv4Inet"],[3,"Ipv6Inet"],[3,"InetIterator"],[8,"Cidr"],[8,"Inet"]]};
initSearch(searchIndex);
