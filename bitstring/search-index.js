var searchIndex = {};
searchIndex["bitstring"] = {"doc":"This crate provides traits to treat various objects as bit strings.","items":[[3,"BitLengthString","bitstring","Extend a `FixedBitString` to a `BitString` by also storing a length.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bitlengthstring"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"new","","Create new dynamic-length bit string from fixed bit string and a length.",0,{"inputs":[{"name":"w"},{"name":"usize"}],"output":{"name":"self"}}],[11,"contains","","check whether another bit string `bits` is prefixed by `self`",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"bool"}}],[11,"get","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"set","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"flip","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"len","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clip","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"append","","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"null","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"shared_prefix_len","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"usize"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[0,"bit_string","","contains everything related to the `BitString` trait.",null,null],[8,"BitString","bitstring::bit_string","A bit string with variable (but possibly limited) length.",null,null],[10,"get","","Get the `ndx`th bit.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"set","","Set the `ndx`th bit to `bit`.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[10,"flip","","Flips the `ndx`th bit.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"len","","Current length of the bit string in bits.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"clip","","Set current length to `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"append","","Append a bit.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"null","","Create a new zero-length bit string.",1,{"inputs":[],"output":{"name":"self"}}],[11,"shared_prefix_len","","Length of the longest shared prefix of two bit strings.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"usize"}}],[11,"shared_prefix","","Longest shared prefix of two bit strings.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"subset_cmp","","Partial ordering on bit strings.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"lexicographic_cmp","","Lexicographic ordering on bit strings.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[0,"fixed_bit_string","bitstring","contains everything related to the `FixedBitString` trait.",null,null],[3,"Iter","bitstring::fixed_bit_string","Iterator to iterate over all `FixedBitString` values with a shared prefix.",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FixedBitString","","A bit string with fixed length.",null,null],[10,"inc","","Treat bit string as integer, where bit 0 is the most significant bit.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"iter","","Iterate through all bit strings until `inc` overflows.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"iter"}}],[10,"len","","Length of the bit string in bits.",3,{"inputs":[],"output":{"name":"usize"}}],[10,"get","","Get the `ndx`th bit.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"set","","Set the `ndx`th bit to `bit`.",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"on","","Set the `ndx`th bit to `true`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"off","","Set the `ndx`th bit to `false`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"flip","","Flips the `ndx`th bit.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shared_prefix_len","","Length of the longest shared prefix of two bit strings.",3,{"inputs":[{"name":"self"},{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[10,"set_false_from","","Set all bits in [ndx..] to `false`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"is_false_from","","Whether all bits in [ndx..] are `false`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"set_true_from","","Set all bits in [ndx..] to `true`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"is_true_from","","Whether all bits in [ndx..] are `true`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"new_all_false","","New bit string with all bits set to `false`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"new_all_true","","New bit string with all bits set to `true`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"contains","","check whether another bit string `other` shares the first `prefix` bits with `self`",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"self"}],"output":{"name":"bool"}}],[0,"utils","bitstring","utils to support implementing bit string traits",null,null],[8,"BigEndianBitString","bitstring::utils","Generic helper methods to treat [u*]-slices as big endian bit strings.",null,null],[11,"elembits","","bits in a single element",4,{"inputs":[],"output":{"name":"usize"}}],[10,"mask","","integer with single bit set. bit 0 is the highest bit (big endian).  Wraps at `Self::elembits()`.",4,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"inc","","increment from right; don't touch first `prefix` bits; returns true on overflow",4,null],[10,"get","","Get the `ndx`th bit.",4,null],[11,"set","","Set the `ndx`th bit to `bit`.",4,null],[10,"on","","Set the `ndx`th bit to `true`.",4,null],[10,"off","","Set the `ndx`th bit to `false`.",4,null],[10,"flip","","Flips the `ndx`th bit.",4,null],[10,"shared_prefix_len","","Length of the longest shared prefix of two bit strings.",4,null],[10,"set_false_from","","Set all bits from [ndx..] to `false`.",4,null],[10,"is_false_from","","Whether all bits from [ndx..] are `false`.",4,null],[10,"set_true_from","","Set all bits from [ndx..] to `true`.",4,null],[10,"is_true_from","","Whether all bits from [ndx..] are `true`.",4,null],[10,"contains","","check whether another bit string `other` shares the first `prefix` bits with `self`",4,null],[8,"BitString","bitstring","A bit string with variable (but possibly limited) length.",null,null],[10,"get","","Get the `ndx`th bit.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"set","","Set the `ndx`th bit to `bit`.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[10,"flip","","Flips the `ndx`th bit.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"len","","Current length of the bit string in bits.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"clip","","Set current length to `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"append","","Append a bit.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"null","","Create a new zero-length bit string.",1,{"inputs":[],"output":{"name":"self"}}],[11,"shared_prefix_len","bitstring::bit_string","Length of the longest shared prefix of two bit strings.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"usize"}}],[11,"shared_prefix","","Longest shared prefix of two bit strings.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"subset_cmp","","Partial ordering on bit strings.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"lexicographic_cmp","","Lexicographic ordering on bit strings.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"FixedBitString","bitstring","A bit string with fixed length.",null,null],[10,"inc","","Treat bit string as integer, where bit 0 is the most significant bit.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"iter","bitstring::fixed_bit_string","Iterate through all bit strings until `inc` overflows.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"iter"}}],[10,"len","bitstring","Length of the bit string in bits.",3,{"inputs":[],"output":{"name":"usize"}}],[10,"get","","Get the `ndx`th bit.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"set","","Set the `ndx`th bit to `bit`.",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"on","bitstring::fixed_bit_string","Set the `ndx`th bit to `true`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"off","","Set the `ndx`th bit to `false`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"flip","","Flips the `ndx`th bit.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shared_prefix_len","","Length of the longest shared prefix of two bit strings.",3,{"inputs":[{"name":"self"},{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[10,"set_false_from","bitstring","Set all bits in [ndx..] to `false`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"is_false_from","","Whether all bits in [ndx..] are `false`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"set_true_from","","Set all bits in [ndx..] to `true`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[10,"is_true_from","","Whether all bits in [ndx..] are `true`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"new_all_false","","New bit string with all bits set to `false`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"new_all_true","","New bit string with all bits set to `true`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"contains","","check whether another bit string `other` shares the first `prefix` bits with `self`",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"self"}],"output":{"name":"bool"}}],[11,"shared_prefix_len","bitstring::bit_string","Length of the longest shared prefix of two bit strings.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"usize"}}],[11,"shared_prefix","","Longest shared prefix of two bit strings.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"subset_cmp","","Partial ordering on bit strings.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"lexicographic_cmp","","Lexicographic ordering on bit strings.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"iter","bitstring::fixed_bit_string","Iterate through all bit strings until `inc` overflows.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"iter"}}],[11,"on","","Set the `ndx`th bit to `true`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"off","","Set the `ndx`th bit to `false`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"flip","","Flips the `ndx`th bit.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shared_prefix_len","","Length of the longest shared prefix of two bit strings.",3,{"inputs":[{"name":"self"},{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"elembits","bitstring::utils","bits in a single element",4,{"inputs":[],"output":{"name":"usize"}}],[11,"set","","Set the `ndx`th bit to `bit`.",4,null]],"paths":[[3,"BitLengthString"],[8,"BitString"],[3,"Iter"],[8,"FixedBitString"],[8,"BigEndianBitString"]]};
initSearch(searchIndex);
