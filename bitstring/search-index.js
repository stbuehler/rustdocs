var searchIndex = JSON.parse('{\
"bitstring":{"doc":"This crate provides traits to treat various objects as bit …","t":[3,8,8,10,11,0,11,11,11,10,11,11,11,11,10,11,11,11,0,10,11,11,11,10,10,11,11,10,11,10,10,10,10,11,11,11,10,10,10,11,11,10,10,11,10,10,11,11,11,11,11,0,8,10,10,10,10,10,11,11,11,10,10,11,11,11,11,11,11,11,11,11,8,3,11,11,11,11,10,11,11,11,11,11,10,10,11,11,10,10,11,11,11,10,10,10,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,8,10,11,11,10,10,10,10,10,10,10,10,11,11,10,10,10],"n":["BitLengthString","BitString","FixedBitString","append","append","bit_string","bits","borrow","borrow_mut","clip","clip","clone","clone_into","cmp","contains","contains","default","eq","fixed_bit_string","flip","flip","fmt","from","get","get","get","hash","inc","into","is_false_from","is_true_from","len","len","len","len","new","new_all_false","new_all_true","null","null","partial_cmp","set","set","set","set_false_from","set_true_from","shared_prefix_len","to_owned","try_from","try_into","type_id","utils","BitString","append","clip","flip","get","len","lexicographic_cmp","lexicographic_cmp","lexicographic_cmp","null","set","shared_prefix","shared_prefix","shared_prefix","shared_prefix_len","shared_prefix_len","shared_prefix_len","subset_cmp","subset_cmp","subset_cmp","FixedBitString","Iter","borrow","borrow_mut","clone","clone_into","contains","flip","flip","flip","fmt","from","get","inc","into","into_iter","is_false_from","is_true_from","iter","iter","iter","len","new_all_false","new_all_true","next","off","off","off","on","on","on","set","set_false_from","set_true_from","shared_prefix_len","shared_prefix_len","shared_prefix_len","to_owned","try_from","try_into","type_id","BigEndianBitString","contains","elembits","elembits","flip","get","inc","is_false_from","is_true_from","mask","off","on","set","set","set_false_from","set_true_from","shared_prefix_len"],"q":["bitstring","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitstring::bit_string","","","","","","","","","","","","","","","","","","","","bitstring::fixed_bit_string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitstring::utils","","","","","","","","","","","","","","","",""],"d":["Extend a <code>FixedBitString</code> to a <code>BitString</code> by also storing a …","A bit string with variable (but possibly limited) length.","A bit string with fixed length.","Append a bit.","","contains everything related to the <code>BitString</code> trait.","get read access to the bits","","","Set current length to <code>len</code>.","","","","","check whether another bit string <code>other</code> shares the first …","check whether another bit string <code>bits</code> is prefixed by <code>self</code>","","","contains everything related to the <code>FixedBitString</code> trait.","Flips the <code>ndx</code>th bit.","","","","Get the <code>ndx</code>th bit.","Get the <code>ndx</code>th bit.","","","Treat bit string as integer, where bit 0 is the most …","","Whether all bits in [ndx..] are <code>false</code>.","Whether all bits in [ndx..] are <code>true</code>.","Current length of the bit string in bits.","Length of the bit string in bits.","","length of bit string (same as <code>BitString::len()</code>)","Create new dynamic-length bit string from fixed bit string …","New bit string with all bits set to <code>false</code>.","New bit string with all bits set to <code>true</code>.","Create a new zero-length bit string.","","","Set the <code>ndx</code>th bit to <code>bit</code>.","Set the <code>ndx</code>th bit to <code>bit</code>.","","Set all bits in [ndx..] to <code>false</code>.","Set all bits in [ndx..] to <code>true</code>.","","","","","","utils to support implementing bit string traits","A bit string with variable (but possibly limited) length.","Append a bit.","Set current length to <code>len</code>.","Flips the <code>ndx</code>th bit.","Get the <code>ndx</code>th bit.","Current length of the bit string in bits.","Lexicographic ordering on bit strings.","Lexicographic ordering on bit strings.","Lexicographic ordering on bit strings.","Create a new zero-length bit string.","Set the <code>ndx</code>th bit to <code>bit</code>.","Longest shared prefix of two bit strings.","Longest shared prefix of two bit strings.","Longest shared prefix of two bit strings.","Length of the longest shared prefix of two bit strings.","Length of the longest shared prefix of two bit strings.","Length of the longest shared prefix of two bit strings.","Partial ordering on bit strings.","Partial ordering on bit strings.","Partial ordering on bit strings.","A bit string with fixed length.","Iterator to iterate over all <code>FixedBitString</code> values with a …","","","","","check whether another bit string <code>other</code> shares the first …","Flips the <code>ndx</code>th bit.","Flips the <code>ndx</code>th bit.","Flips the <code>ndx</code>th bit.","","","Get the <code>ndx</code>th bit.","Treat bit string as integer, where bit 0 is the most …","","","Whether all bits in [ndx..] are <code>false</code>.","Whether all bits in [ndx..] are <code>true</code>.","Iterate through all bit strings until <code>inc</code> overflows.","Iterate through all bit strings until <code>inc</code> overflows.","Iterate through all bit strings until <code>inc</code> overflows.","Length of the bit string in bits.","New bit string with all bits set to <code>false</code>.","New bit string with all bits set to <code>true</code>.","","Set the <code>ndx</code>th bit to <code>false</code>.","Set the <code>ndx</code>th bit to <code>false</code>.","Set the <code>ndx</code>th bit to <code>false</code>.","Set the <code>ndx</code>th bit to <code>true</code>.","Set the <code>ndx</code>th bit to <code>true</code>.","Set the <code>ndx</code>th bit to <code>true</code>.","Set the <code>ndx</code>th bit to <code>bit</code>.","Set all bits in [ndx..] to <code>false</code>.","Set all bits in [ndx..] to <code>true</code>.","Length of the longest shared prefix of two bit strings.","Length of the longest shared prefix of two bit strings.","Length of the longest shared prefix of two bit strings.","","","","","Generic helper methods to treat [u*]-slices as big endian …","check whether another bit string <code>other</code> shares the first …","bits in a single element","bits in a single element","Flips the <code>ndx</code>th bit.","Get the <code>ndx</code>th bit.","increment from right; don’t touch first <code>prefix</code> bits; …","Whether all bits from [ndx..] are <code>false</code>.","Whether all bits from [ndx..] are <code>true</code>.","integer with single bit set. bit 0 is the highest bit (big …","Set the <code>ndx</code>th bit to <code>false</code>.","Set the <code>ndx</code>th bit to <code>true</code>.","Set the <code>ndx</code>th bit to <code>bit</code>.","Set the <code>ndx</code>th bit to <code>bit</code>.","Set all bits from [ndx..] to <code>false</code>.","Set all bits from [ndx..] to <code>true</code>.","Length of the longest shared prefix of two bit strings."],"i":[0,0,0,1,2,0,2,2,2,1,2,2,2,2,3,2,2,2,0,1,2,2,2,1,3,2,2,3,2,3,3,1,3,2,2,2,3,3,1,2,2,1,3,2,3,3,2,2,2,2,2,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,4,4,4,4,3,3,3,3,4,4,3,3,4,4,3,3,3,3,3,3,3,3,4,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"f":[null,null,null,[[["bool",15]]],[[["bool",15]]],null,[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["bitlengthstring",3]],[[]],[[],["ordering",4]],[[["usize",15]],["bool",15]],[[],["bool",15]],[[]],[[],["bool",15]],null,[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[]],[[["usize",15]],["bool",15]],[[]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],[["option",4,["ordering"]],["ordering",4]]],[[["usize",15],["bool",15]]],[[["usize",15],["bool",15]]],[[["usize",15],["bool",15]]],[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[["bool",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["bool",15]],[[],["usize",15]],[[],["ordering",4]],[[],["ordering",4]],[[],["ordering",4]],[[]],[[["usize",15],["bool",15]]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],[["option",4,["ordering"]],["ordering",4]]],[[],[["option",4,["ordering"]],["ordering",4]]],[[],[["option",4,["ordering"]],["ordering",4]]],null,null,[[]],[[]],[[],["iter",3]],[[]],[[["usize",15]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[]],[[]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["iter",3]],[[["usize",15]],["iter",3]],[[["usize",15]],["iter",3]],[[],["usize",15]],[[]],[[]],[[],["option",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["bool",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["usize",15]],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["bool",15]]],[[["usize",15],["bool",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["usize",15]]],"p":[[8,"BitString"],[3,"BitLengthString"],[8,"FixedBitString"],[3,"Iter"],[8,"BigEndianBitString"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};