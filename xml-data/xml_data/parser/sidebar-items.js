initSidebarItems({"derive":[["Element","Derive `xml-data::parser::Element`"],["Inner","Derive `xml-data::parser::Inner`"]],"enum":[["InnerParseResult","Result of `InnerState` parse methods to signal whether they successfully parsed the input or another `InnerState` needs to take a shot."]],"struct":[["IgnoreElement","Can be used as `ElementState` to ignore an element with all content (attributes and sub elements and text)"],["ParseElementList","`InnerState` to parse multiple occurences of a single element"],["ParseElementOnce","`InnerState` to parse a single element"],["ParseElementOptional","`InnerState` to parse a single optional element"],["ParseInnerOptional","`InnerState` to parse optional inner data; if it parsed anything it needs to finish"],["ValueDefault","Implements `Value` for all types implementing `std::str::FromStr`; this is a good default."],["ValueString","Implements `Value` for `String` and `Cow<str>`."]],"trait":[["Element","Parsable element"],["ElementParser","A parser that is ready to parse exactly one element (and nested data)."],["ElementParserExt","extend `ElementParser` trait with convenience methods"],["ElementState","A state to parse exactly one element"],["FixedElementState","Convenience trait to implement instead of `ElementState` if your element has a fixed tag."],["Inner","Parsable inner data (multiple elements)"],["InnerState","State to parse multiple elements (on the same level)"],["Value","Trait to parse attributes and inner text"]],"type":[["ElementDefaultParseState","Type alias to find the default parse state for an `Element`"],["InnerDefaultParseState","Type alias to find the default parse state for an `Inner`"]]});