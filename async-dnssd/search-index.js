var N = null;var searchIndex = {};
searchIndex["async_dnssd"]={"doc":"Asynchronous wrapper for DNS-SD C libraries","items":[[3,"Class","async_dnssd","DNS CLASS",N,N],[12,"0","","",0,N],[3,"Type","","DNS (RR)TYPE",N,N],[12,"0","","",1,N],[3,"InterfaceIndex","","Network interface index",N,N],[3,"BrowsedFlags","","Flags for `BrowseResult`",N,N],[3,"Browse","","Pending browse request",N,N],[3,"BrowseResult","","Browse result",N,N],[12,"flags","","Flags indicating whether the service was added or removed and whether there are more pending results.",2,N],[12,"interface","","Interface the service was found on.",2,N],[12,"service_name","","Name of the service.",2,N],[12,"reg_type","","Type of the service",2,N],[12,"domain","","Domain the service was found in",2,N],[3,"BrowseData","","Optional data when browsing for a service; either use its default value or customize it like:",N,N],[12,"interface","","interface to query records on",3,N],[12,"domain","","domain on which to search for the service",3,N],[3,"Connection","","Connection to register records with",N,N],[3,"RegisterRecordFlags","","Flags used to register a record",N,N],[3,"RegisterRecord","","Pending record registration",N,N],[3,"RegisterRecordData","","Optional data when registering a record; either use its default value or customize it like:",N,N],[12,"flags","","flags for registration",4,N],[12,"interface","","interface to register record on",4,N],[12,"rr_class","","class of the resource record (default: `IN`)",4,N],[12,"ttl","","time to live of the resource record in seconds (passing 0 will select a sensible default)",4,N],[3,"EnumeratedFlags","","Flags for `EnumerateDomains`",N,N],[3,"EnumerateDomains","","Pending domain enumeration",N,N],[3,"EnumerateResult","","Domain enumeration result",N,N],[12,"flags","","flags",5,N],[12,"interface","","interface domain was found on",5,N],[12,"domain","","domain name",5,N],[3,"QueryRecordFlags","","Flags used to query for a record",N,N],[3,"QueriedRecordFlags","","Flags for `QueryRecordResult`",N,N],[3,"QueryRecord","","Pending query",N,N],[3,"QueryRecordResult","","Query result",N,N],[12,"flags","","flags",6,N],[12,"interface","","interface the record was found on",6,N],[12,"fullname","","name of record",6,N],[12,"rr_type","","type of record",6,N],[12,"rr_class","","class of record",6,N],[12,"rdata","","wire RDATA of record",6,N],[12,"ttl","","TTL (time to live) of record",6,N],[3,"QueryRecordData","","Optional data when querying for a record; either use its default value or customize it like:",N,N],[12,"flags","","flags for query",7,N],[12,"interface","","interface to query records on",7,N],[12,"rr_class","","class of the resource record (default: `IN`)",7,N],[3,"Record","","A successful record registration",N,N],[3,"RegisterFlags","","Flags used to register service",N,N],[3,"Registration","","Successful registration",N,N],[3,"Register","","Pending registration",N,N],[3,"RegisterResult","","Service registration result",N,N],[12,"name","","if `NoAutoRename` was set this is the original name, otherwise it might be different.",8,N],[12,"reg_type","","the registered service type",8,N],[12,"domain","","domain the service was registered on",8,N],[3,"RegisterData","","Optional data when registering a service; either use its default value or customize it like:",N,N],[12,"flags","","flags for registration",9,N],[12,"interface","","interface to register service on",9,N],[12,"name","","service name, defaults to hostname",9,N],[12,"domain","","domain on which to advertise the service",9,N],[12,"host","","the SRV target host name, defaults to local hostname(s). Address records are NOT automatically generated for other names.",9,N],[12,"txt","","The TXT record rdata. Empty RDATA is treated like `b\"\\0\"`, i.e. a TXT record with a single empty string.",9,N],[3,"Resolve","","Pending resolve request",N,N],[3,"ResolveResult","","Resolve result",N,N],[12,"interface","","interface service was resolved on",10,N],[12,"fullname","","full name of service",10,N],[12,"host_target","","hostname the service is provided on",10,N],[12,"port","","port the service is provided on (native endian)",10,N],[12,"txt","","TXT RDATA describing service parameters",10,N],[3,"FullName","","Full name consiting of (up to) three parts",N,N],[12,"service","","(unescaped) service name (becomes single label in full name)",11,N],[12,"reg_type","","registration type (valid names don't need escaping)",11,N],[12,"domain","","(escaped) domain name (most names don't need escaping)",11,N],[3,"TimeoutStream","","Add a timeout to a stream; each time an item is received the timer is reset",N,N],[3,"TxtRecord","","Key-Value container that uses DNS `TXT` RDATA as representation",N,N],[3,"TxtRecordIter","","Iterator for entries in `TxtRecord`",N,N],[4,"Error","","API Error",N,N],[13,"KnownError","","If error code used some recognized name",12,N],[13,"UnknownError","","Unrecognized error codes",12,N],[4,"Interface","","Network interface",N,N],[13,"Any","","Any interface; depending on domain name this means either multicast or unicast",13,N],[13,"Index","","Single interface",13,N],[13,"LocalOnly","","Local machine only",13,N],[13,"Unicast","","See `kDNSServiceInterfaceIndexUnicast`",13,N],[13,"PeerToPeer","","See `kDNSServiceInterfaceIndexP2P`",13,N],[4,"Enumerate","","Whether to enumerate domains which are browsed or domains for which registrations can be made.",N,N],[13,"BrowseDomains","","enumerate domains which can be browsed",14,N],[13,"RegistrationDomains","","enumerate domains to register services/records on",14,N],[4,"TimeoutStreamError","","Error produces by `TimeoutStream`",N,N],[13,"StreamError","","An error occured in the underlying stream",15,N],[13,"TimeoutError","","Setting / checking the timeout failed",15,N],[4,"TxtRecordError","","Error returned when inserting new entries failed",N,N],[13,"InvalidKey","","Key contained invalid characters",16,N],[13,"EntryTooLong","","Total entry would be longer than 255 bytes",16,N],[5,"browse_extended","","Browse for available services",N,[[["str"],["browsedata"],["handle"]],["result",["browse"]]]],[5,"browse","","Browse for available services",N,[[["str"],["handle"]],["result",["browse"]]]],[5,"connect","","Create `Connection` to register records with",N,[[["handle"]],["result",["connection"]]]],[5,"enumerate_domains","","Enumerate domains that are recommended for registration or browsing",N,[[["enumerate"],["interface"],["handle"]],["result",["enumeratedomains"]]]],[5,"query_record_extended","","Query for an arbitrary DNS record",N,[[["str"],["type"],["queryrecorddata"],["handle"]],["result",["queryrecord"]]]],[5,"query_record","","Query for an arbitrary DNS record",N,[[["str"],["type"],["handle"]],["result",["queryrecord"]]]],[5,"register_extended","","Register a service",N,[[["str"],["u16"],["registerdata"],["handle"]],["result",["register"]]]],[5,"register","","Register a service",N,[[["str"],["u16"],["handle"]],["result",["register"]]]],[5,"resolve","","Find hostname and port (and more) for a service",N,[[["interface"],["str"],["str"],["str"],["handle"]],["result",["resolve"]]]],[5,"reconfirm_record","","Purge record from cache",N,N],[11,"clone","","",0,[[["self"]],["class"]]],[11,"eq","","",0,[[["self"],["class"]],["bool"]]],[11,"ne","","",0,[[["self"],["class"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["class"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["class"]],["bool"]]],[11,"le","","",0,[[["self"],["class"]],["bool"]]],[11,"gt","","",0,[[["self"],["class"]],["bool"]]],[11,"ge","","",0,[[["self"],["class"]],["bool"]]],[11,"cmp","","",0,[[["self"],["class"]],["ordering"]]],[11,"hash","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[18,"IN","","CLASS Internet",0,N],[18,"CH","","CLASS \"Chaos\"",0,N],[18,"HS","","CLASS \"Hesiod\"",0,N],[18,"NONE","","QCLASS NONE",0,N],[18,"ANY","","QCLASS \"*\" (ANY)",0,N],[11,"clone","","",1,[[["self"]],["type"]]],[11,"eq","","",1,[[["self"],["type"]],["bool"]]],[11,"ne","","",1,[[["self"],["type"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["type"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["type"]],["bool"]]],[11,"le","","",1,[[["self"],["type"]],["bool"]]],[11,"gt","","",1,[[["self"],["type"]],["bool"]]],[11,"ge","","",1,[[["self"],["type"]],["bool"]]],[11,"cmp","","",1,[[["self"],["type"]],["ordering"]]],[11,"hash","","",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[18,"A","","a host address",1,N],[18,"NS","","an authoritative name server",1,N],[18,"MD","","a mail destination (OBSOLETE - use MX)",1,N],[18,"MF","","a mail forwarder (OBSOLETE - use MX)",1,N],[18,"CNAME","","the canonical name for an alias",1,N],[18,"SOA","","marks the start of a zone of authority",1,N],[18,"MB","","a mailbox domain name (EXPERIMENTAL)",1,N],[18,"MG","","a mail group member (EXPERIMENTAL)",1,N],[18,"MR","","a mail rename domain name (EXPERIMENTAL)",1,N],[18,"NULL","","a null RR (EXPERIMENTAL)",1,N],[18,"WKS","","a well known service description",1,N],[18,"PTR","","a domain name pointer",1,N],[18,"HINFO","","host information",1,N],[18,"MINFO","","mailbox or mail list information",1,N],[18,"MX","","mail exchange",1,N],[18,"TXT","","text strings",1,N],[18,"RP","","for Responsible Person",1,N],[18,"AFSDB","","for AFS Data Base location",1,N],[18,"X25","","for X.25 PSDN address",1,N],[18,"ISDN","","for ISDN address",1,N],[18,"RT","","for Route Through",1,N],[18,"NSAP","","for NSAP address, NSAP style A record",1,N],[18,"NSAP_PTR","","for domain name pointer, NSAP style",1,N],[18,"SIG","","for security signature",1,N],[18,"KEY","","for security key",1,N],[18,"PX","","X.400 mail mapping information",1,N],[18,"GPOS","","Geographical Position",1,N],[18,"AAAA","","IP6 Address",1,N],[18,"LOC","","Location Information",1,N],[18,"NXT","","Next Domain (OBSOLETE)",1,N],[18,"EID","","Endpoint Identifier",1,N],[18,"NIMLOC","","Nimrod Locator",1,N],[18,"SRV","","Server Selection",1,N],[18,"ATMA","","ATM Address",1,N],[18,"NAPTR","","Naming Authority Pointer",1,N],[18,"KX","","Key Exchanger",1,N],[18,"CERT","","CERT",1,N],[18,"A6","","A6 (OBSOLETE - use AAAA)",1,N],[18,"DNAME","","DNAME",1,N],[18,"SINK","","SINK",1,N],[18,"OPT","","OPT",1,N],[18,"APL","","APL",1,N],[18,"DS","","Delegation Signer",1,N],[18,"SSHFP","","SSH Key Fingerprint",1,N],[18,"IPSECKEY","","IPSECKEY",1,N],[18,"RRSIG","","RRSIG",1,N],[18,"NSEC","","NSEC",1,N],[18,"DNSKEY","","DNSKEY",1,N],[18,"DHCID","","DHCID",1,N],[18,"NSEC3","","NSEC3",1,N],[18,"NSEC3PARAM","","NSEC3PARAM",1,N],[18,"TLSA","","TLSA",1,N],[18,"SMIMEA","","S/MIME cert association",1,N],[18,"HIP","","Host Identity Protocol",1,N],[18,"NINFO","","NINFO",1,N],[18,"RKEY","","RKEY",1,N],[18,"TALINK","","Trust Anchor LINK",1,N],[18,"CDS","","Child DS",1,N],[18,"CDNSKEY","","DNSKEY(s) the Child wants reflected in DS",1,N],[18,"OPENPGPKEY","","OpenPGP Key",1,N],[18,"CSYNC","","Child-To-Parent Synchronization",1,N],[18,"SPF","","SPF",1,N],[18,"UINFO","","UINFO",1,N],[18,"UID","","UID",1,N],[18,"GID","","GID",1,N],[18,"UNSPEC","","UNSPEC",1,N],[18,"NID","","NID",1,N],[18,"L32","","L32",1,N],[18,"L64","","L64",1,N],[18,"LP","","LP",1,N],[18,"EUI48","","an EUI-48 address",1,N],[18,"EUI64","","an EUI-64 address",1,N],[18,"TKEY","","Transaction Key",1,N],[18,"TSIG","","Transaction Signature",1,N],[18,"IXFR","","incremental transfer",1,N],[18,"AXFR","","transfer of an entire zone",1,N],[18,"MAILB","","mailbox-related RRs (MB, MG or MR)",1,N],[18,"MAILA","","mail agent RRs (OBSOLETE - see MX)",1,N],[18,"ANY","","\"*\", a request for all records the server/cache has available",1,N],[18,"URI","","URI",1,N],[18,"CAA","","Certification Authority Restriction",1,N],[18,"AVC","","Application Visibility and Control",1,N],[18,"DOA","","Digital Object Architecture",1,N],[18,"TA","","DNSSEC Trust Authorities",1,N],[18,"DLV","","DNSSEC Lookaside Validation",1,N],[11,"clone","","",12,[[["self"]],["error"]]],[11,"eq","","",12,[[["self"],["error"]],["bool"]]],[11,"ne","","",12,[[["self"],["error"]],["bool"]]],[11,"hash","","",12,N],[11,"from","","Check if a raw error code represents an error, and convert it accordingly.  (Not all codes are treated as an error, including `0`).",12,[[["i32"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"description","","",12,[[["self"]],["str"]]],[11,"clone","","",17,[[["self"]],["interfaceindex"]]],[11,"eq","","",17,[[["self"],["interfaceindex"]],["bool"]]],[11,"ne","","",17,[[["self"],["interfaceindex"]],["bool"]]],[11,"partial_cmp","","",17,[[["self"],["interfaceindex"]],["option",["ordering"]]]],[11,"lt","","",17,[[["self"],["interfaceindex"]],["bool"]]],[11,"le","","",17,[[["self"],["interfaceindex"]],["bool"]]],[11,"gt","","",17,[[["self"],["interfaceindex"]],["bool"]]],[11,"ge","","",17,[[["self"],["interfaceindex"]],["bool"]]],[11,"cmp","","",17,[[["self"],["interfaceindex"]],["ordering"]]],[11,"hash","","",17,N],[11,"from_raw","","Construct new `InterfaceIndex` from raw index and makes sure not to use the special reserved values (`0` and `!0`).",17,[[["u32"]],["option"]]],[11,"into_raw","","raw index",17,[[["self"]],["u32"]]],[11,"into","","",17,[[["self"]],["u32"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["interface"]]],[11,"eq","","",13,[[["self"],["interface"]],["bool"]]],[11,"ne","","",13,[[["self"],["interface"]],["bool"]]],[11,"partial_cmp","","",13,[[["self"],["interface"]],["option",["ordering"]]]],[11,"lt","","",13,[[["self"],["interface"]],["bool"]]],[11,"le","","",13,[[["self"],["interface"]],["bool"]]],[11,"gt","","",13,[[["self"],["interface"]],["bool"]]],[11,"ge","","",13,[[["self"],["interface"]],["bool"]]],[11,"cmp","","",13,[[["self"],["interface"]],["ordering"]]],[11,"hash","","",13,N],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"default","","",13,[[],["self"]]],[11,"from_raw","","Construct from raw value",13,[[["u32"]],["self"]]],[11,"into_raw","","Convert to raw value",13,[[["self"]],["u32"]]],[11,"into","","",13,[[["self"]],["u32"]]],[11,"eq","","",18,[[["self"],["browsedflags"]],["bool"]]],[11,"ne","","",18,[[["self"],["browsedflags"]],["bool"]]],[11,"clone","","",18,[[["self"]],["browsedflags"]]],[11,"partial_cmp","","",18,[[["self"],["browsedflags"]],["option",["ordering"]]]],[11,"lt","","",18,[[["self"],["browsedflags"]],["bool"]]],[11,"le","","",18,[[["self"],["browsedflags"]],["bool"]]],[11,"gt","","",18,[[["self"],["browsedflags"]],["bool"]]],[11,"ge","","",18,[[["self"],["browsedflags"]],["bool"]]],[11,"cmp","","",18,[[["self"],["browsedflags"]],["ordering"]]],[11,"hash","","",18,N],[11,"default","","",18,[[],["browsedflags"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[18,"MORE_COMING","","Indicates at least one more result is pending in the queue.  If not set there still might be more results coming in the future.",18,N],[18,"ADD","","Indicates the result is new.  If not set indicates the result was removed.",18,N],[11,"empty","","Returns an empty set of flags.",18,[[],["browsedflags"]]],[11,"all","","Returns the set containing all flags.",18,[[],["browsedflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",18,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",18,[[["u32"]],["option",["browsedflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",18,[[["u32"]],["browsedflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",18,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",18,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",18,[[["self"],["browsedflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",18,[[["self"],["browsedflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",18,[[["self"],["browsedflags"]]]],[11,"remove","","Removes the specified flags in-place.",18,[[["self"],["browsedflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",18,[[["self"],["browsedflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",18,[[["self"],["browsedflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",18,[[["self"],["browsedflags"]],["browsedflags"]]],[11,"bitor_assign","","Adds the set of flags.",18,[[["self"],["browsedflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",18,[[["self"],["browsedflags"]],["browsedflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",18,[[["self"],["browsedflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",18,[[["self"],["browsedflags"]],["browsedflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",18,[[["self"],["browsedflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",18,[[["self"],["browsedflags"]],["browsedflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",18,[[["self"],["browsedflags"]]]],[11,"not","","Returns the complement of this set of flags.",18,[[["self"]],["browsedflags"]]],[11,"extend","","",18,[[["self"],["t"]]]],[11,"from_iter","","",18,[[["t"]],["browsedflags"]]],[11,"poll","","",19,[[["self"]],["result",["async"]]]],[11,"remote","","",19,[[["self"]],["remote"]]],[11,"clone","","",2,[[["self"]],["browseresult"]]],[11,"eq","","",2,[[["self"],["browseresult"]],["bool"]]],[11,"ne","","",2,[[["self"],["browseresult"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["browseresult"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["browseresult"]],["bool"]]],[11,"le","","",2,[[["self"],["browseresult"]],["bool"]]],[11,"gt","","",2,[[["self"],["browseresult"]],["bool"]]],[11,"ge","","",2,[[["self"],["browseresult"]],["bool"]]],[11,"cmp","","",2,[[["self"],["browseresult"]],["ordering"]]],[11,"hash","","",2,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"resolve","","Resolve browse result.",2,[[["self"],["handle"]],["result",["resolve"]]]],[11,"clone","","",3,[[["self"]],["browsedata"]]],[11,"eq","","",3,[[["self"],["browsedata"]],["bool"]]],[11,"ne","","",3,[[["self"],["browsedata"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["browsedata"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["browsedata"]],["bool"]]],[11,"le","","",3,[[["self"],["browsedata"]],["bool"]]],[11,"gt","","",3,[[["self"],["browsedata"]],["bool"]]],[11,"ge","","",3,[[["self"],["browsedata"]],["bool"]]],[11,"cmp","","",3,[[["self"],["browsedata"]],["ordering"]]],[11,"hash","","",3,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["self"]]],[11,"remote","","",20,[[["self"]],["remote"]]],[11,"eq","","",21,[[["self"],["registerrecordflags"]],["bool"]]],[11,"ne","","",21,[[["self"],["registerrecordflags"]],["bool"]]],[11,"clone","","",21,[[["self"]],["registerrecordflags"]]],[11,"partial_cmp","","",21,[[["self"],["registerrecordflags"]],["option",["ordering"]]]],[11,"lt","","",21,[[["self"],["registerrecordflags"]],["bool"]]],[11,"le","","",21,[[["self"],["registerrecordflags"]],["bool"]]],[11,"gt","","",21,[[["self"],["registerrecordflags"]],["bool"]]],[11,"ge","","",21,[[["self"],["registerrecordflags"]],["bool"]]],[11,"cmp","","",21,[[["self"],["registerrecordflags"]],["ordering"]]],[11,"hash","","",21,N],[11,"default","","",21,[[],["registerrecordflags"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[18,"SHARED","","Indicates there might me multiple records with the given name, type and class.",21,N],[18,"UNIQUE","","Indicates the records with the given name, type and class is unique.",21,N],[11,"empty","","Returns an empty set of flags.",21,[[],["registerrecordflags"]]],[11,"all","","Returns the set containing all flags.",21,[[],["registerrecordflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",21,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",21,[[["u32"]],["option",["registerrecordflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",21,[[["u32"]],["registerrecordflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",21,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",21,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",21,[[["self"],["registerrecordflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",21,[[["self"],["registerrecordflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",21,[[["self"],["registerrecordflags"]]]],[11,"remove","","Removes the specified flags in-place.",21,[[["self"],["registerrecordflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",21,[[["self"],["registerrecordflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",21,[[["self"],["registerrecordflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",21,[[["self"],["registerrecordflags"]],["registerrecordflags"]]],[11,"bitor_assign","","Adds the set of flags.",21,[[["self"],["registerrecordflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",21,[[["self"],["registerrecordflags"]],["registerrecordflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",21,[[["self"],["registerrecordflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",21,[[["self"],["registerrecordflags"]],["registerrecordflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",21,[[["self"],["registerrecordflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",21,[[["self"],["registerrecordflags"]],["registerrecordflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",21,[[["self"],["registerrecordflags"]]]],[11,"not","","Returns the complement of this set of flags.",21,[[["self"]],["registerrecordflags"]]],[11,"extend","","",21,[[["self"],["t"]]]],[11,"from_iter","","",21,[[["t"]],["registerrecordflags"]]],[11,"poll","","",22,[[["self"]],["result",["async"]]]],[11,"remote","","",22,[[["self"]],["remote"]]],[11,"default","","",4,[[],["self"]]],[11,"register_record_extended","","Register record on interface with given name, type, class, rdata and ttl",20,N],[11,"register_record","","Register record on interface with given name, type, class, rdata and ttl",20,N],[11,"rr_type","","Type of the record",22,[[["self"]],["type"]]],[11,"update_record","","Update record",22,N],[11,"keep","","Keep record for as long as the underlying connection lives.",22,[[["self"],["handle"]]]],[11,"clone","","",14,[[["self"]],["enumerate"]]],[11,"eq","","",14,[[["self"],["enumerate"]],["bool"]]],[11,"partial_cmp","","",14,[[["self"],["enumerate"]],["option",["ordering"]]]],[11,"cmp","","",14,[[["self"],["enumerate"]],["ordering"]]],[11,"hash","","",14,N],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"into","","",14,[[["self"]],["u32"]]],[11,"eq","","",23,[[["self"],["enumeratedflags"]],["bool"]]],[11,"ne","","",23,[[["self"],["enumeratedflags"]],["bool"]]],[11,"clone","","",23,[[["self"]],["enumeratedflags"]]],[11,"partial_cmp","","",23,[[["self"],["enumeratedflags"]],["option",["ordering"]]]],[11,"lt","","",23,[[["self"],["enumeratedflags"]],["bool"]]],[11,"le","","",23,[[["self"],["enumeratedflags"]],["bool"]]],[11,"gt","","",23,[[["self"],["enumeratedflags"]],["bool"]]],[11,"ge","","",23,[[["self"],["enumeratedflags"]],["bool"]]],[11,"cmp","","",23,[[["self"],["enumeratedflags"]],["ordering"]]],[11,"hash","","",23,N],[11,"default","","",23,[[],["enumeratedflags"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[18,"MORE_COMING","","Indicates at least one more result is pending in the queue.  If not set there still might be more results coming in the future.",23,N],[18,"ADD","","Indicates the result is new.  If not set indicates the result was removed.",23,N],[18,"DEFAULT","","Indicates this is the default domain to search (always combined with `Add`).",23,N],[11,"empty","","Returns an empty set of flags.",23,[[],["enumeratedflags"]]],[11,"all","","Returns the set containing all flags.",23,[[],["enumeratedflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",23,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",23,[[["u32"]],["option",["enumeratedflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",23,[[["u32"]],["enumeratedflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",23,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",23,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",23,[[["self"],["enumeratedflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",23,[[["self"],["enumeratedflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",23,[[["self"],["enumeratedflags"]]]],[11,"remove","","Removes the specified flags in-place.",23,[[["self"],["enumeratedflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",23,[[["self"],["enumeratedflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",23,[[["self"],["enumeratedflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",23,[[["self"],["enumeratedflags"]],["enumeratedflags"]]],[11,"bitor_assign","","Adds the set of flags.",23,[[["self"],["enumeratedflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",23,[[["self"],["enumeratedflags"]],["enumeratedflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",23,[[["self"],["enumeratedflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",23,[[["self"],["enumeratedflags"]],["enumeratedflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",23,[[["self"],["enumeratedflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",23,[[["self"],["enumeratedflags"]],["enumeratedflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",23,[[["self"],["enumeratedflags"]]]],[11,"not","","Returns the complement of this set of flags.",23,[[["self"]],["enumeratedflags"]]],[11,"extend","","",23,[[["self"],["t"]]]],[11,"from_iter","","",23,[[["t"]],["enumeratedflags"]]],[11,"poll","","",24,[[["self"]],["result",["async"]]]],[11,"remote","","",24,[[["self"]],["remote"]]],[11,"clone","","",5,[[["self"]],["enumerateresult"]]],[11,"eq","","",5,[[["self"],["enumerateresult"]],["bool"]]],[11,"ne","","",5,[[["self"],["enumerateresult"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["enumerateresult"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["enumerateresult"]],["bool"]]],[11,"le","","",5,[[["self"],["enumerateresult"]],["bool"]]],[11,"gt","","",5,[[["self"],["enumerateresult"]],["bool"]]],[11,"ge","","",5,[[["self"],["enumerateresult"]],["bool"]]],[11,"cmp","","",5,[[["self"],["enumerateresult"]],["ordering"]]],[11,"hash","","",5,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",25,[[["self"],["queryrecordflags"]],["bool"]]],[11,"ne","","",25,[[["self"],["queryrecordflags"]],["bool"]]],[11,"clone","","",25,[[["self"]],["queryrecordflags"]]],[11,"partial_cmp","","",25,[[["self"],["queryrecordflags"]],["option",["ordering"]]]],[11,"lt","","",25,[[["self"],["queryrecordflags"]],["bool"]]],[11,"le","","",25,[[["self"],["queryrecordflags"]],["bool"]]],[11,"gt","","",25,[[["self"],["queryrecordflags"]],["bool"]]],[11,"ge","","",25,[[["self"],["queryrecordflags"]],["bool"]]],[11,"cmp","","",25,[[["self"],["queryrecordflags"]],["ordering"]]],[11,"hash","","",25,N],[11,"default","","",25,[[],["queryrecordflags"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[18,"LONG_LIVED_QUERY","","long-lived unicast query",25,N],[11,"empty","","Returns an empty set of flags.",25,[[],["queryrecordflags"]]],[11,"all","","Returns the set containing all flags.",25,[[],["queryrecordflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",25,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",25,[[["u32"]],["option",["queryrecordflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",25,[[["u32"]],["queryrecordflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",25,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",25,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",25,[[["self"],["queryrecordflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",25,[[["self"],["queryrecordflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",25,[[["self"],["queryrecordflags"]]]],[11,"remove","","Removes the specified flags in-place.",25,[[["self"],["queryrecordflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",25,[[["self"],["queryrecordflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",25,[[["self"],["queryrecordflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",25,[[["self"],["queryrecordflags"]],["queryrecordflags"]]],[11,"bitor_assign","","Adds the set of flags.",25,[[["self"],["queryrecordflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",25,[[["self"],["queryrecordflags"]],["queryrecordflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",25,[[["self"],["queryrecordflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",25,[[["self"],["queryrecordflags"]],["queryrecordflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",25,[[["self"],["queryrecordflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",25,[[["self"],["queryrecordflags"]],["queryrecordflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",25,[[["self"],["queryrecordflags"]]]],[11,"not","","Returns the complement of this set of flags.",25,[[["self"]],["queryrecordflags"]]],[11,"extend","","",25,[[["self"],["t"]]]],[11,"from_iter","","",25,[[["t"]],["queryrecordflags"]]],[11,"eq","","",26,[[["self"],["queriedrecordflags"]],["bool"]]],[11,"ne","","",26,[[["self"],["queriedrecordflags"]],["bool"]]],[11,"clone","","",26,[[["self"]],["queriedrecordflags"]]],[11,"partial_cmp","","",26,[[["self"],["queriedrecordflags"]],["option",["ordering"]]]],[11,"lt","","",26,[[["self"],["queriedrecordflags"]],["bool"]]],[11,"le","","",26,[[["self"],["queriedrecordflags"]],["bool"]]],[11,"gt","","",26,[[["self"],["queriedrecordflags"]],["bool"]]],[11,"ge","","",26,[[["self"],["queriedrecordflags"]],["bool"]]],[11,"cmp","","",26,[[["self"],["queriedrecordflags"]],["ordering"]]],[11,"hash","","",26,N],[11,"default","","",26,[[],["queriedrecordflags"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[18,"MORE_COMING","","Indicates at least one more result is pending in the queue.  If not set there still might be more results coming in the future.",26,N],[18,"ADD","","Indicates the result is new.  If not set indicates the result was removed.",26,N],[11,"empty","","Returns an empty set of flags.",26,[[],["queriedrecordflags"]]],[11,"all","","Returns the set containing all flags.",26,[[],["queriedrecordflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",26,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",26,[[["u32"]],["option",["queriedrecordflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",26,[[["u32"]],["queriedrecordflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",26,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",26,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",26,[[["self"],["queriedrecordflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",26,[[["self"],["queriedrecordflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",26,[[["self"],["queriedrecordflags"]]]],[11,"remove","","Removes the specified flags in-place.",26,[[["self"],["queriedrecordflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",26,[[["self"],["queriedrecordflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",26,[[["self"],["queriedrecordflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",26,[[["self"],["queriedrecordflags"]],["queriedrecordflags"]]],[11,"bitor_assign","","Adds the set of flags.",26,[[["self"],["queriedrecordflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",26,[[["self"],["queriedrecordflags"]],["queriedrecordflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",26,[[["self"],["queriedrecordflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",26,[[["self"],["queriedrecordflags"]],["queriedrecordflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",26,[[["self"],["queriedrecordflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",26,[[["self"],["queriedrecordflags"]],["queriedrecordflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",26,[[["self"],["queriedrecordflags"]]]],[11,"not","","Returns the complement of this set of flags.",26,[[["self"]],["queriedrecordflags"]]],[11,"extend","","",26,[[["self"],["t"]]]],[11,"from_iter","","",26,[[["t"]],["queriedrecordflags"]]],[11,"poll","","",27,[[["self"]],["result",["async"]]]],[11,"remote","","",27,[[["self"]],["remote"]]],[11,"clone","","",6,[[["self"]],["queryrecordresult"]]],[11,"eq","","",6,[[["self"],["queryrecordresult"]],["bool"]]],[11,"ne","","",6,[[["self"],["queryrecordresult"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["queryrecordresult"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["queryrecordresult"]],["bool"]]],[11,"le","","",6,[[["self"],["queryrecordresult"]],["bool"]]],[11,"gt","","",6,[[["self"],["queryrecordresult"]],["bool"]]],[11,"ge","","",6,[[["self"],["queryrecordresult"]],["bool"]]],[11,"cmp","","",6,[[["self"],["queryrecordresult"]],["ordering"]]],[11,"hash","","",6,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"default","","",7,[[],["self"]]],[11,"rr_type","","Type of the record",28,[[["self"]],["type"]]],[11,"update_record","","Update record",28,N],[11,"keep","","Keep record alive for as long as the underlying `Registration` or `Connection` lives",28,[[["self"]]]],[11,"eq","","",29,[[["self"],["registerflags"]],["bool"]]],[11,"ne","","",29,[[["self"],["registerflags"]],["bool"]]],[11,"clone","","",29,[[["self"]],["registerflags"]]],[11,"partial_cmp","","",29,[[["self"],["registerflags"]],["option",["ordering"]]]],[11,"lt","","",29,[[["self"],["registerflags"]],["bool"]]],[11,"le","","",29,[[["self"],["registerflags"]],["bool"]]],[11,"gt","","",29,[[["self"],["registerflags"]],["bool"]]],[11,"ge","","",29,[[["self"],["registerflags"]],["bool"]]],[11,"cmp","","",29,[[["self"],["registerflags"]],["ordering"]]],[11,"hash","","",29,N],[11,"default","","",29,[[],["registerflags"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[18,"NO_AUTO_RENAME","","Indicates a name conflict should not get handled automatically.",29,N],[18,"SHARED","","Indicates there might me multiple records with the given name, type and class.",29,N],[18,"UNIQUE","","Indicates the records with the given name, type and class is unique.",29,N],[11,"empty","","Returns an empty set of flags.",29,[[],["registerflags"]]],[11,"all","","Returns the set containing all flags.",29,[[],["registerflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",29,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",29,[[["u32"]],["option",["registerflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",29,[[["u32"]],["registerflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",29,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",29,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",29,[[["self"],["registerflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",29,[[["self"],["registerflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",29,[[["self"],["registerflags"]]]],[11,"remove","","Removes the specified flags in-place.",29,[[["self"],["registerflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",29,[[["self"],["registerflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",29,[[["self"],["registerflags"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",29,[[["self"],["registerflags"]],["registerflags"]]],[11,"bitor_assign","","Adds the set of flags.",29,[[["self"],["registerflags"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",29,[[["self"],["registerflags"]],["registerflags"]]],[11,"bitxor_assign","","Toggles the set of flags.",29,[[["self"],["registerflags"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",29,[[["self"],["registerflags"]],["registerflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",29,[[["self"],["registerflags"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",29,[[["self"],["registerflags"]],["registerflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",29,[[["self"],["registerflags"]]]],[11,"not","","Returns the complement of this set of flags.",29,[[["self"]],["registerflags"]]],[11,"extend","","",29,[[["self"],["t"]]]],[11,"from_iter","","",29,[[["t"]],["registerflags"]]],[11,"add_record","","Add a record to a registered service",30,N],[11,"get_default_txt_record","","Get `Record` handle for default TXT record associated with the service registration (e.g. to update it).",30,[[["self"]],["record"]]],[11,"add_record","","Add a record to a registered service",31,N],[11,"get_default_txt_record","","Get `Record` handle for default TXT record associated with the service registration (e.g. to update it).",31,[[["self"]],["record"]]],[11,"poll","","",31,[[["self"]],["result",["async"]]]],[11,"remote","","",31,[[["self"]],["remote"]]],[11,"clone","","",8,[[["self"]],["registerresult"]]],[11,"eq","","",8,[[["self"],["registerresult"]],["bool"]]],[11,"ne","","",8,[[["self"],["registerresult"]],["bool"]]],[11,"partial_cmp","","",8,[[["self"],["registerresult"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["registerresult"]],["bool"]]],[11,"le","","",8,[[["self"],["registerresult"]],["bool"]]],[11,"gt","","",8,[[["self"],["registerresult"]],["bool"]]],[11,"ge","","",8,[[["self"],["registerresult"]],["bool"]]],[11,"cmp","","",8,[[["self"],["registerresult"]],["ordering"]]],[11,"hash","","",8,N],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["registerdata"]]],[11,"eq","","",9,[[["self"],["registerdata"]],["bool"]]],[11,"ne","","",9,[[["self"],["registerdata"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["registerdata"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["registerdata"]],["bool"]]],[11,"le","","",9,[[["self"],["registerdata"]],["bool"]]],[11,"gt","","",9,[[["self"],["registerdata"]],["bool"]]],[11,"ge","","",9,[[["self"],["registerdata"]],["bool"]]],[11,"cmp","","",9,[[["self"],["registerdata"]],["ordering"]]],[11,"hash","","",9,N],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"default","","",9,[[],["self"]]],[11,"poll","","",32,[[["self"]],["result",["async"]]]],[11,"remote","","",32,[[["self"]],["remote"]]],[11,"clone","","",10,[[["self"]],["resolveresult"]]],[11,"eq","","",10,[[["self"],["resolveresult"]],["bool"]]],[11,"ne","","",10,[[["self"],["resolveresult"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["resolveresult"]],["option",["ordering"]]]],[11,"lt","","",10,[[["self"],["resolveresult"]],["bool"]]],[11,"le","","",10,[[["self"],["resolveresult"]],["bool"]]],[11,"gt","","",10,[[["self"],["resolveresult"]],["bool"]]],[11,"ge","","",10,[[["self"],["resolveresult"]],["bool"]]],[11,"cmp","","",10,[[["self"],["resolveresult"]],["ordering"]]],[11,"hash","","",10,N],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"construct","","Escape and concatenate all three parts to a full name",11,[[["self"]],["result",["string"]]]],[11,"new","","Create new `TimeoutStream`.",33,[[["s"],["duration"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"into_io_error","","Combine to an `std::io::Error`.",15,[[["self"]],["error"]]],[11,"poll","","",33,[[["self"]],["result",["async"]]]],[11,"remote","","",33,[[["self"]],["remote"]]],[11,"clone","","",34,[[["self"]],["txtrecord"]]],[11,"new","","Constructs a new, empty `TxtRecord`.",34,[[],["self"]]],[11,"with_capacity","","Constructs a new, empty `TxtRecord` with the specified capacity.",34,[[["usize"]],["self"]]],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be used by inserting operations.",34,[[["self"],["usize"]]]],[11,"is_empty","","Returns `true` if the `TxtRecord` contains no elements (both in bytes and key-value entries).",34,[[["self"]],["bool"]]],[11,"clear","","Clears the `TxtRecord`, removing all entries.",34,[[["self"]]]],[11,"data","","if not empty this returns valid TXT RDATA, otherwise just an empty slice.",34,N],[11,"rdata","","always returns valid TXT RDATA; when the container is empty it will return a TXT record with a single empty string (i.e. `&[0x00]`).",34,N],[11,"iter","","Iterate over all `(key, value)` pairs.",34,[[["self"]],["txtrecorditer"]]],[11,"get","","Get value for entry with given key",34,N],[11,"remove","","Remove entry with given key (if it exists)",34,N],[11,"set","","Insert or update the entry with `key` to have the given value or on value",34,N],[11,"set_no_value","","Insert or update the entry with `key` to have no value",34,N],[11,"set_value","","Insert or update the entry with `key` to have the given value",34,N],[11,"default","","",34,[[],["self"]]],[11,"clone","","",16,[[["self"]],["txtrecorderror"]]],[11,"eq","","",16,[[["self"],["txtrecorderror"]],["bool"]]],[11,"partial_cmp","","",16,[[["self"],["txtrecorderror"]],["option",["ordering"]]]],[11,"cmp","","",16,[[["self"],["txtrecorderror"]],["ordering"]]],[11,"hash","","",16,N],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"next","","",35,[[["self"]],["option"]]],[17,"MAX_DOMAIN_NAME","","Maximum length of full name including trailing dot and terminating NULL",N,N],[8,"GetRemote","","Access `Remote` handle of `Future`s and `Stream`s supporting it",N,N],[10,"remote","","get `Remote` reference",36,[[["self"]],["remote"]]],[8,"TimeoutTrait","","`futures::Stream` extension to simplify building `TimeoutStream`",N,N],[10,"timeout","","Create new `TimeoutStream`",37,[[["self"],["duration"]],["result",["timeoutstream"]]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"into_future","","",22,[[["self"]],["f"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"into_future","","",31,[[["self"]],["f"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into_iter","","",35,[[["self"]],["i"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]]],"paths":[[3,"Class"],[3,"Type"],[3,"BrowseResult"],[3,"BrowseData"],[3,"RegisterRecordData"],[3,"EnumerateResult"],[3,"QueryRecordResult"],[3,"QueryRecordData"],[3,"RegisterResult"],[3,"RegisterData"],[3,"ResolveResult"],[3,"FullName"],[4,"Error"],[4,"Interface"],[4,"Enumerate"],[4,"TimeoutStreamError"],[4,"TxtRecordError"],[3,"InterfaceIndex"],[3,"BrowsedFlags"],[3,"Browse"],[3,"Connection"],[3,"RegisterRecordFlags"],[3,"RegisterRecord"],[3,"EnumeratedFlags"],[3,"EnumerateDomains"],[3,"QueryRecordFlags"],[3,"QueriedRecordFlags"],[3,"QueryRecord"],[3,"Record"],[3,"RegisterFlags"],[3,"Registration"],[3,"Register"],[3,"Resolve"],[3,"TimeoutStream"],[3,"TxtRecord"],[3,"TxtRecordIter"],[8,"GetRemote"],[8,"TimeoutTrait"]]};
initSearch(searchIndex);
