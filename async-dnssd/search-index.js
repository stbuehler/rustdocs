var searchIndex={};
searchIndex["async_dnssd"] = {"doc":"Asynchronous wrapper for DNS-SD C libraries","i":[[3,"Class","async_dnssd","DNS CLASS",null,null],[12,"0","","",0,null],[3,"Type","","DNS (RR)TYPE",null,null],[12,"0","","",1,null],[3,"InterfaceIndex","","Network interface index",null,null],[3,"BrowsedFlags","","Flags for `BrowseResult`",null,null],[3,"Browse","","Pending browse request",null,null],[3,"BrowseResult","","Browse result",null,null],[12,"flags","","Flags indicating whether the service was added or removed…",2,null],[12,"interface","","Interface the service was found on.",2,null],[12,"service_name","","Name of the service.",2,null],[12,"reg_type","","Type of the service",2,null],[12,"domain","","Domain the service was found in",2,null],[3,"BrowseData","","Optional data when browsing for a service; either use its…",null,null],[12,"interface","","interface to query records on",3,null],[12,"domain","","domain on which to search for the service",3,null],[3,"Connection","","Connection to register records with",null,null],[3,"RegisterRecordFlags","","Flags used to register a record",null,null],[3,"RegisterRecord","","Pending record registration",null,null],[3,"RegisterRecordData","","Optional data when registering a record; either use its…",null,null],[12,"flags","","flags for registration",4,null],[12,"interface","","interface to register record on",4,null],[12,"rr_class","","class of the resource record (default: `IN`)",4,null],[12,"ttl","","time to live of the resource record in seconds (passing 0…",4,null],[3,"EnumeratedFlags","","Flags for `EnumerateDomains`",null,null],[3,"EnumerateDomains","","Pending domain enumeration",null,null],[3,"EnumerateResult","","Domain enumeration result",null,null],[12,"flags","","flags",5,null],[12,"interface","","interface domain was found on",5,null],[12,"domain","","domain name",5,null],[3,"QueryRecordFlags","","Flags used to query for a record",null,null],[3,"QueriedRecordFlags","","Flags for `QueryRecordResult`",null,null],[3,"QueryRecord","","Pending query",null,null],[3,"QueryRecordResult","","Query result",null,null],[12,"flags","","flags",6,null],[12,"interface","","interface the record was found on",6,null],[12,"fullname","","name of record",6,null],[12,"rr_type","","type of record",6,null],[12,"rr_class","","class of record",6,null],[12,"rdata","","wire RDATA of record",6,null],[12,"ttl","","TTL (time to live) of record",6,null],[3,"QueryRecordData","","Optional data when querying for a record; either use its…",null,null],[12,"flags","","flags for query",7,null],[12,"interface","","interface to query records on",7,null],[12,"rr_class","","class of the resource record (default: `IN`)",7,null],[3,"Record","","A successful record registration",null,null],[3,"RegisterFlags","","Flags used to register service",null,null],[3,"Registration","","Successful registration",null,null],[3,"Register","","Pending registration",null,null],[3,"RegisterResult","","Service registration result",null,null],[12,"name","","if `NoAutoRename` was set this is the original name,…",8,null],[12,"reg_type","","the registered service type",8,null],[12,"domain","","domain the service was registered on",8,null],[3,"RegisterData","","Optional data when registering a service; either use its…",null,null],[12,"flags","","flags for registration",9,null],[12,"interface","","interface to register service on",9,null],[12,"name","","service name, defaults to hostname",9,null],[12,"domain","","domain on which to advertise the service",9,null],[12,"host","","the SRV target host name, defaults to local hostname(s).…",9,null],[12,"txt","","The TXT record rdata. Empty RDATA is treated like `b\"\\0\"`,…",9,null],[3,"ResolvedFlags","","Flags for `ResolveResult`",null,null],[3,"Resolve","","Pending resolve request",null,null],[3,"ResolveResult","","Resolve result",null,null],[12,"flags","","flags",10,null],[12,"interface","","interface service was resolved on",10,null],[12,"fullname","","full name of service",10,null],[12,"host_target","","hostname the service is provided on",10,null],[12,"port","","port the service is provided on (native endian)",10,null],[12,"txt","","TXT RDATA describing service parameters",10,null],[3,"ResolvedHostFlags","","Flags for `ResolveHostResult`",null,null],[3,"ResolveHostData","","Optional data when querying for a record; either use its…",null,null],[12,"flags","","flags for query",11,null],[12,"interface","","interface to query records on",11,null],[3,"ResolveHost","","Pending resolve",null,null],[3,"ResolveHostResult","","Resolve host result",null,null],[12,"flags","","flags",12,null],[12,"address","","address",12,null],[3,"FullName","","Full name consiting of (up to) three parts",null,null],[12,"service","","(unescaped) service name (becomes single label in full name)",13,null],[12,"reg_type","","registration type (valid names don't need escaping)",13,null],[12,"domain","","(escaped) domain name (most names don't need escaping)",13,null],[3,"TimeoutStream","","Add a timeout to a stream; each time an item is received…",null,null],[3,"TxtRecord","","Key-Value container that uses DNS `TXT` RDATA as…",null,null],[3,"TxtRecordIter","","Iterator for entries in `TxtRecord`",null,null],[4,"Error","","API Error",null,null],[13,"KnownError","","If error code used some recognized name",14,null],[13,"UnknownError","","Unrecognized error codes",14,null],[13,"IoError","","IO error",14,null],[4,"Interface","","Network interface",null,null],[13,"Any","","Any interface; depending on domain name this means either…",15,null],[13,"Index","","Single interface",15,null],[13,"LocalOnly","","Local machine only",15,null],[13,"Unicast","","See `kDNSServiceInterfaceIndexUnicast`",15,null],[13,"PeerToPeer","","See `kDNSServiceInterfaceIndexP2P`",15,null],[4,"Enumerate","","Whether to enumerate domains which are browsed or domains…",null,null],[13,"BrowseDomains","","enumerate domains which can be browsed",16,null],[13,"RegistrationDomains","","enumerate domains to register services/records on",16,null],[4,"ScopedSocketAddr","","IP address with port and \"scope id\" (even for IPv4)",null,null],[13,"V4","","IPv4 target",17,null],[12,"address","async_dnssd::ScopedSocketAddr","IP address",17,null],[12,"port","","Port",17,null],[12,"scope_id","","Scope id (interface index; 0 for any)",17,null],[13,"V6","async_dnssd","IPv6 target",17,null],[12,"address","async_dnssd::ScopedSocketAddr","IP address",17,null],[12,"port","","Port",17,null],[12,"scope_id","","Scope id (interface index; 0 for any)",17,null],[4,"TimeoutStreamError","async_dnssd","Error produces by `TimeoutStream`",null,null],[13,"StreamError","","An error occured in the underlying stream",18,null],[13,"TimeoutError","","Setting / checking the timeout failed",18,null],[4,"TxtRecordError","","Error returned when inserting new entries failed",null,null],[13,"InvalidKey","","Key contained invalid characters",19,null],[13,"EntryTooLong","","Total entry would be longer than 255 bytes",19,null],[5,"browse_extended","","Browse for available services",null,[[["str"],["browsedata"]],[["browse"],["result",["browse"]]]]],[5,"browse","","Browse for available services",null,[[["str"]],[["browse"],["result",["browse"]]]]],[5,"connect","","Create `Connection` to register records with",null,[[],[["connection"],["result",["connection"]]]]],[5,"enumerate_domains","","Enumerate domains that are recommended for registration or…",null,[[["interface"],["enumerate"]],[["enumeratedomains"],["result",["enumeratedomains"]]]]],[5,"query_record_extended","","Query for an arbitrary DNS record",null,[[["str"],["queryrecorddata"],["type"]],[["queryrecord"],["result",["queryrecord"]]]]],[5,"query_record","","Query for an arbitrary DNS record",null,[[["str"],["type"]],[["queryrecord"],["result",["queryrecord"]]]]],[5,"register_extended","","Register a service",null,[[["str"],["u16"],["registerdata"]],[["register"],["result",["register"]]]]],[5,"register","","Register a service",null,[[["str"],["u16"]],[["register"],["result",["register"]]]]],[5,"resolve","","Find hostname and port (and more) for a service",null,[[["interface"],["str"]],[["resolve"],["result",["resolve"]]]]],[5,"resolve_host_extended","","Resolves hostname (with passed port) to stream of…",null,[[["str"],["u16"],["resolvehostdata"]],[["resolvehost"],["result",["resolvehost"]]]]],[5,"reconfirm_record","","Purge record from cache",null,[[["str"],["type"],["interface"],["class"]],["result"]]],[18,"IN","","CLASS Internet",0,null],[18,"CH","","CLASS \"Chaos\"",0,null],[18,"HS","","CLASS \"Hesiod\"",0,null],[18,"NONE","","QCLASS NONE",0,null],[18,"ANY","","QCLASS \"*\" (ANY)",0,null],[18,"A","","a host address",1,null],[18,"NS","","an authoritative name server",1,null],[18,"MD","","a mail destination (OBSOLETE - use MX)",1,null],[18,"MF","","a mail forwarder (OBSOLETE - use MX)",1,null],[18,"CNAME","","the canonical name for an alias",1,null],[18,"SOA","","marks the start of a zone of authority",1,null],[18,"MB","","a mailbox domain name (EXPERIMENTAL)",1,null],[18,"MG","","a mail group member (EXPERIMENTAL)",1,null],[18,"MR","","a mail rename domain name (EXPERIMENTAL)",1,null],[18,"NULL","","a null RR (EXPERIMENTAL)",1,null],[18,"WKS","","a well known service description",1,null],[18,"PTR","","a domain name pointer",1,null],[18,"HINFO","","host information",1,null],[18,"MINFO","","mailbox or mail list information",1,null],[18,"MX","","mail exchange",1,null],[18,"TXT","","text strings",1,null],[18,"RP","","for Responsible Person",1,null],[18,"AFSDB","","for AFS Data Base location",1,null],[18,"X25","","for X.25 PSDN address",1,null],[18,"ISDN","","for ISDN address",1,null],[18,"RT","","for Route Through",1,null],[18,"NSAP","","for NSAP address, NSAP style A record",1,null],[18,"NSAP_PTR","","for domain name pointer, NSAP style",1,null],[18,"SIG","","for security signature",1,null],[18,"KEY","","for security key",1,null],[18,"PX","","X.400 mail mapping information",1,null],[18,"GPOS","","Geographical Position",1,null],[18,"AAAA","","IP6 Address",1,null],[18,"LOC","","Location Information",1,null],[18,"NXT","","Next Domain (OBSOLETE)",1,null],[18,"EID","","Endpoint Identifier",1,null],[18,"NIMLOC","","Nimrod Locator",1,null],[18,"SRV","","Server Selection",1,null],[18,"ATMA","","ATM Address",1,null],[18,"NAPTR","","Naming Authority Pointer",1,null],[18,"KX","","Key Exchanger",1,null],[18,"CERT","","CERT",1,null],[18,"A6","","A6 (OBSOLETE - use AAAA)",1,null],[18,"DNAME","","DNAME",1,null],[18,"SINK","","SINK",1,null],[18,"OPT","","OPT",1,null],[18,"APL","","APL",1,null],[18,"DS","","Delegation Signer",1,null],[18,"SSHFP","","SSH Key Fingerprint",1,null],[18,"IPSECKEY","","IPSECKEY",1,null],[18,"RRSIG","","RRSIG",1,null],[18,"NSEC","","NSEC",1,null],[18,"DNSKEY","","DNSKEY",1,null],[18,"DHCID","","DHCID",1,null],[18,"NSEC3","","NSEC3",1,null],[18,"NSEC3PARAM","","NSEC3PARAM",1,null],[18,"TLSA","","TLSA",1,null],[18,"SMIMEA","","S/MIME cert association",1,null],[18,"HIP","","Host Identity Protocol",1,null],[18,"NINFO","","NINFO",1,null],[18,"RKEY","","RKEY",1,null],[18,"TALINK","","Trust Anchor LINK",1,null],[18,"CDS","","Child DS",1,null],[18,"CDNSKEY","","DNSKEY(s) the Child wants reflected in DS",1,null],[18,"OPENPGPKEY","","OpenPGP Key",1,null],[18,"CSYNC","","Child-To-Parent Synchronization",1,null],[18,"SPF","","SPF",1,null],[18,"UINFO","","UINFO",1,null],[18,"UID","","UID",1,null],[18,"GID","","GID",1,null],[18,"UNSPEC","","UNSPEC",1,null],[18,"NID","","NID",1,null],[18,"L32","","L32",1,null],[18,"L64","","L64",1,null],[18,"LP","","LP",1,null],[18,"EUI48","","an EUI-48 address",1,null],[18,"EUI64","","an EUI-64 address",1,null],[18,"TKEY","","Transaction Key",1,null],[18,"TSIG","","Transaction Signature",1,null],[18,"IXFR","","incremental transfer",1,null],[18,"AXFR","","transfer of an entire zone",1,null],[18,"MAILB","","mailbox-related RRs (MB, MG or MR)",1,null],[18,"MAILA","","mail agent RRs (OBSOLETE - see MX)",1,null],[18,"ANY","","\"*\", a request for all records the server/cache has…",1,null],[18,"URI","","URI",1,null],[18,"CAA","","Certification Authority Restriction",1,null],[18,"AVC","","Application Visibility and Control",1,null],[18,"DOA","","Digital Object Architecture",1,null],[18,"TA","","DNSSEC Trust Authorities",1,null],[18,"DLV","","DNSSEC Lookaside Validation",1,null],[11,"from","","Check if a raw error code represents an error, and convert…",14,[[["i32"]],[["result",["error"]],["error"]]]],[11,"from_raw","","Construct new `InterfaceIndex` from raw index and makes…",20,[[["u32"]],["option"]]],[11,"into_raw","","raw index",20,[[],["u32"]]],[11,"from_raw","","Construct from raw value",15,[[["u32"]],["self"]]],[11,"into_raw","","Convert to raw value",15,[[],["u32"]]],[11,"scope_id","","Extract scope id / interface index",15,[[],["u32"]]],[18,"MORE_COMING","","Indicates at least one more result is pending in the…",21,null],[18,"ADD","","Indicates the result is new. If not set indicates the…",21,null],[11,"empty","","Returns an empty set of flags",21,[[],["browsedflags"]]],[11,"all","","Returns the set containing all flags.",21,[[],["browsedflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",21,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",21,[[["u32"]],[["option",["browsedflags"]],["browsedflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",21,[[["u32"]],["browsedflags"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",21,[[["u32"]],["browsedflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",21,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",21,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",21,[[["self"],["browsedflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",21,[[["self"],["browsedflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",21,[[["self"],["browsedflags"]]]],[11,"remove","","Removes the specified flags in-place.",21,[[["self"],["browsedflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",21,[[["self"],["browsedflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",21,[[["self"],["browsedflags"],["bool"]]]],[11,"resolve","","Resolve browse result.",2,[[["self"]],[["result",["resolve"]],["resolve"]]]],[18,"SHARED","","Indicates there might me multiple records with the given…",22,null],[18,"UNIQUE","","Indicates the records with the given name, type and class…",22,null],[11,"empty","","Returns an empty set of flags",22,[[],["registerrecordflags"]]],[11,"all","","Returns the set containing all flags.",22,[[],["registerrecordflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",22,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",22,[[["u32"]],[["option",["registerrecordflags"]],["registerrecordflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",22,[[["u32"]],["registerrecordflags"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",22,[[["u32"]],["registerrecordflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",22,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",22,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",22,[[["registerrecordflags"],["self"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",22,[[["registerrecordflags"],["self"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",22,[[["self"],["registerrecordflags"]]]],[11,"remove","","Removes the specified flags in-place.",22,[[["self"],["registerrecordflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",22,[[["self"],["registerrecordflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",22,[[["self"],["registerrecordflags"],["bool"]]]],[11,"register_record_extended","","Register record on interface with given name, type, class,…",23,[[["str"],["registerrecorddata"],["type"],["self"]],[["registerrecord"],["result",["registerrecord"]]]]],[11,"register_record","","Register record on interface with given name, type, class,…",23,[[["str"],["type"],["self"]],[["registerrecord"],["result",["registerrecord"]]]]],[11,"rr_type","","Type of the record",24,[[["self"]],["type"]]],[11,"update_record","","Update record",24,[[["u32"],["self"]],["result"]]],[11,"keep","","Keep record for as long as the underlying connection lives.",24,[[]]],[18,"MORE_COMING","","Indicates at least one more result is pending in the…",25,null],[18,"ADD","","Indicates the result is new. If not set indicates the…",25,null],[18,"DEFAULT","","Indicates this is the default domain to search (always…",25,null],[11,"empty","","Returns an empty set of flags",25,[[],["enumeratedflags"]]],[11,"all","","Returns the set containing all flags.",25,[[],["enumeratedflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",25,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",25,[[["u32"]],[["enumeratedflags"],["option",["enumeratedflags"]]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",25,[[["u32"]],["enumeratedflags"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",25,[[["u32"]],["enumeratedflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",25,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",25,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",25,[[["enumeratedflags"],["self"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",25,[[["enumeratedflags"],["self"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",25,[[["enumeratedflags"],["self"]]]],[11,"remove","","Removes the specified flags in-place.",25,[[["enumeratedflags"],["self"]]]],[11,"toggle","","Toggles the specified flags in-place.",25,[[["enumeratedflags"],["self"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",25,[[["enumeratedflags"],["self"],["bool"]]]],[18,"LONG_LIVED_QUERY","","long-lived unicast query",26,null],[11,"empty","","Returns an empty set of flags",26,[[],["queryrecordflags"]]],[11,"all","","Returns the set containing all flags.",26,[[],["queryrecordflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",26,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",26,[[["u32"]],[["option",["queryrecordflags"]],["queryrecordflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",26,[[["u32"]],["queryrecordflags"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",26,[[["u32"]],["queryrecordflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",26,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",26,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",26,[[["self"],["queryrecordflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",26,[[["self"],["queryrecordflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",26,[[["self"],["queryrecordflags"]]]],[11,"remove","","Removes the specified flags in-place.",26,[[["self"],["queryrecordflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",26,[[["self"],["queryrecordflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",26,[[["bool"],["self"],["queryrecordflags"]]]],[18,"MORE_COMING","","Indicates at least one more result is pending in the…",27,null],[18,"ADD","","Indicates the result is new. If not set indicates the…",27,null],[11,"empty","","Returns an empty set of flags",27,[[],["queriedrecordflags"]]],[11,"all","","Returns the set containing all flags.",27,[[],["queriedrecordflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",27,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",27,[[["u32"]],[["queriedrecordflags"],["option",["queriedrecordflags"]]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",27,[[["u32"]],["queriedrecordflags"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",27,[[["u32"]],["queriedrecordflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",27,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",27,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",27,[[["queriedrecordflags"],["self"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",27,[[["queriedrecordflags"],["self"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",27,[[["queriedrecordflags"],["self"]]]],[11,"remove","","Removes the specified flags in-place.",27,[[["queriedrecordflags"],["self"]]]],[11,"toggle","","Toggles the specified flags in-place.",27,[[["queriedrecordflags"],["self"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",27,[[["queriedrecordflags"],["self"],["bool"]]]],[11,"rr_type","","Type of the record",28,[[["self"]],["type"]]],[11,"update_record","","Update record",28,[[["u32"],["self"]],["result"]]],[11,"keep","","Keep record alive for as long as the underlying…",28,[[]]],[18,"NO_AUTO_RENAME","","Indicates a name conflict should not get handled…",29,null],[18,"SHARED","","Indicates there might me multiple records with the given…",29,null],[18,"UNIQUE","","Indicates the records with the given name, type and class…",29,null],[11,"empty","","Returns an empty set of flags",29,[[],["registerflags"]]],[11,"all","","Returns the set containing all flags.",29,[[],["registerflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",29,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",29,[[["u32"]],[["option",["registerflags"]],["registerflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",29,[[["u32"]],["registerflags"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",29,[[["u32"]],["registerflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",29,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",29,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",29,[[["self"],["registerflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",29,[[["self"],["registerflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",29,[[["self"],["registerflags"]]]],[11,"remove","","Removes the specified flags in-place.",29,[[["self"],["registerflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",29,[[["self"],["registerflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",29,[[["self"],["registerflags"],["bool"]]]],[11,"add_record","","Add a record to a registered service",30,[[["u32"],["type"],["self"]],[["result",["record"]],["record"]]]],[11,"get_default_txt_record","","Get `Record` handle for default TXT record associated with…",30,[[["self"]],["record"]]],[11,"add_record","","Add a record to a registered service",31,[[["u32"],["type"],["self"]],[["result",["record"]],["record"]]]],[11,"get_default_txt_record","","Get `Record` handle for default TXT record associated with…",31,[[["self"]],["record"]]],[18,"MORE_COMING","","Indicates at least one more result is pending in the…",32,null],[11,"empty","","Returns an empty set of flags",32,[[],["resolvedflags"]]],[11,"all","","Returns the set containing all flags.",32,[[],["resolvedflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",32,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",32,[[["u32"]],[["resolvedflags"],["option",["resolvedflags"]]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",32,[[["u32"]],["resolvedflags"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",32,[[["u32"]],["resolvedflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",32,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",32,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",32,[[["resolvedflags"],["self"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",32,[[["resolvedflags"],["self"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",32,[[["resolvedflags"],["self"]]]],[11,"remove","","Removes the specified flags in-place.",32,[[["resolvedflags"],["self"]]]],[11,"toggle","","Toggles the specified flags in-place.",32,[[["resolvedflags"],["self"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",32,[[["resolvedflags"],["self"],["bool"]]]],[11,"resolve_socket_address","","Lookup socket addresses for resolved service",10,[[["self"]],[["resolvehost"],["result",["resolvehost"]]]]],[18,"ADD","","Indicates the result is new. If not set indicates the…",33,null],[11,"empty","","Returns an empty set of flags",33,[[],["resolvedhostflags"]]],[11,"all","","Returns the set containing all flags.",33,[[],["resolvedhostflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",33,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",33,[[["u32"]],[["resolvedhostflags"],["option",["resolvedhostflags"]]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",33,[[["u32"]],["resolvedhostflags"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",33,[[["u32"]],["resolvedhostflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",33,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",33,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",33,[[["self"],["resolvedhostflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",33,[[["self"],["resolvedhostflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",33,[[["self"],["resolvedhostflags"]]]],[11,"remove","","Removes the specified flags in-place.",33,[[["self"],["resolvedhostflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",33,[[["self"],["resolvedhostflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",33,[[["bool"],["self"],["resolvedhostflags"]]]],[11,"new","","Create new `ScopedSocketAddr`",17,[[["u16"],["ipaddr"],["u32"]],["self"]]],[11,"construct","","Escape and concatenate all three parts to a full name",13,[[["self"]],[["result",["string"]],["string"]]]],[11,"new","","Create new `TimeoutStream`.",34,[[["s"],["duration"]],["result"]]],[11,"into_io_error","","Combine to an `std::io::Error`.",18,[[],["error"]]],[11,"new","","Constructs a new, empty `TxtRecord`.",35,[[],["self"]]],[11,"parse_vec","","Parse binary blob as TXT RDATA",35,[[["vec",["u8"]],["u8"]],["option"]]],[11,"parse","","Parse some binary blob as TXT RDATA",35,[[],["option"]]],[11,"with_capacity","","Constructs a new, empty `TxtRecord` with the specified…",35,[[["usize"]],["self"]]],[11,"reserve","","Reserves capacity for at least `additional` more bytes to…",35,[[["self"],["usize"]]]],[11,"is_empty","","Returns `true` if the `TxtRecord` contains no elements…",35,[[["self"]],["bool"]]],[11,"clear","","Clears the `TxtRecord`, removing all entries.",35,[[["self"]]]],[11,"data","","if not empty this returns valid TXT RDATA, otherwise just…",35,[[["self"]]]],[11,"rdata","","always returns valid TXT RDATA; when the container is…",35,[[["self"]]]],[11,"iter","","Iterate over all `(key, value)` pairs.",35,[[["self"]],["txtrecorditer"]]],[11,"get","","Get value for entry with given key",35,[[["self"]],[["option",["option"]],["option"]]]],[11,"remove","","Remove entry with given key (if it exists)",35,[[["self"]]]],[11,"set","","Insert or update the entry with `key` to have the given…",35,[[["self"],["option"]],[["result",["txtrecorderror"]],["txtrecorderror"]]]],[11,"set_no_value","","Insert or update the entry with `key` to have no value",35,[[["self"]],[["result",["txtrecorderror"]],["txtrecorderror"]]]],[11,"set_value","","Insert or update the entry with `key` to have the given…",35,[[["self"]],[["result",["txtrecorderror"]],["txtrecorderror"]]]],[17,"MAX_DOMAIN_NAME","","Maximum length of full name including trailing dot and…",null,null],[8,"StreamTimeoutExt","","`futures::Stream` extension to simplify building…",null,null],[10,"timeout","","Create new `TimeoutStream`",36,[[["duration"]],[["timeoutstream"],["result",["timeoutstream"]]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"try_poll_next","","",37,[[["pin"],["s"],["context"]],[["poll",["option"]],["option",["result"]]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"try_poll","","",24,[[["f"],["context"],["pin"]],["poll"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"try_poll_next","","",38,[[["pin"],["s"],["context"]],[["poll",["option"]],["option",["result"]]]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"try_poll_next","","",39,[[["pin"],["s"],["context"]],[["poll",["option"]],["option",["result"]]]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"try_poll","","",31,[[["f"],["context"],["pin"]],["poll"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"try_poll_next","","",40,[[["pin"],["s"],["context"]],[["poll",["option"]],["option",["result"]]]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"try_poll_next","","",41,[[["pin"],["s"],["context"]],[["poll",["option"]],["option",["result"]]]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"try_poll_next","","",34,[[["pin"],["s"],["context"]],[["poll",["option"]],["option",["result"]]]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"into_iter","","",42,[[],["i"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"to_string","","",17,[[["self"]],["string"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",14,[[["error"]],["self"]]],[11,"into","","",20,[[],["u32"]]],[11,"into","","",15,[[],["u32"]]],[11,"into","","",16,[[],["u32"]]],[11,"into","","",17,[[],["socketaddr"]]],[11,"into","","",17,[[],["socketaddrv6"]]],[11,"extend","","",21,[[["self"],["intoiterator"]]]],[11,"extend","","",22,[[["self"],["intoiterator"]]]],[11,"extend","","",25,[[["self"],["intoiterator"]]]],[11,"extend","","",26,[[["self"],["intoiterator"]]]],[11,"extend","","",27,[[["self"],["intoiterator"]]]],[11,"extend","","",29,[[["self"],["intoiterator"]]]],[11,"extend","","",32,[[["self"],["intoiterator"]]]],[11,"extend","","",33,[[["intoiterator"],["self"]]]],[11,"next","","",42,[[["self"]],["option"]]],[11,"clone","","",0,[[["self"]],["class"]]],[11,"clone","","",1,[[["self"]],["type"]]],[11,"clone","","",20,[[["self"]],["interfaceindex"]]],[11,"clone","","",15,[[["self"]],["interface"]]],[11,"clone","","",21,[[["self"]],["browsedflags"]]],[11,"clone","","",2,[[["self"]],["browseresult"]]],[11,"clone","","",3,[[["self"]],["browsedata"]]],[11,"clone","","",22,[[["self"]],["registerrecordflags"]]],[11,"clone","","",4,[[["self"]],["registerrecorddata"]]],[11,"clone","","",16,[[["self"]],["enumerate"]]],[11,"clone","","",25,[[["self"]],["enumeratedflags"]]],[11,"clone","","",5,[[["self"]],["enumerateresult"]]],[11,"clone","","",26,[[["self"]],["queryrecordflags"]]],[11,"clone","","",27,[[["self"]],["queriedrecordflags"]]],[11,"clone","","",6,[[["self"]],["queryrecordresult"]]],[11,"clone","","",7,[[["self"]],["queryrecorddata"]]],[11,"clone","","",29,[[["self"]],["registerflags"]]],[11,"clone","","",8,[[["self"]],["registerresult"]]],[11,"clone","","",9,[[["self"]],["registerdata"]]],[11,"clone","","",32,[[["self"]],["resolvedflags"]]],[11,"clone","","",10,[[["self"]],["resolveresult"]]],[11,"clone","","",33,[[["self"]],["resolvedhostflags"]]],[11,"clone","","",11,[[["self"]],["resolvehostdata"]]],[11,"clone","","",12,[[["self"]],["resolvehostresult"]]],[11,"clone","","",17,[[["self"]],["scopedsocketaddr"]]],[11,"clone","","",35,[[["self"]],["txtrecord"]]],[11,"clone","","",19,[[["self"]],["txtrecorderror"]]],[11,"default","","",15,[[],["self"]]],[11,"default","","",21,[[],["browsedflags"]]],[11,"default","","",3,[[],["self"]]],[11,"default","","",22,[[],["registerrecordflags"]]],[11,"default","","",4,[[],["self"]]],[11,"default","","",25,[[],["enumeratedflags"]]],[11,"default","","",26,[[],["queryrecordflags"]]],[11,"default","","",27,[[],["queriedrecordflags"]]],[11,"default","","",7,[[],["self"]]],[11,"default","","",29,[[],["registerflags"]]],[11,"default","","",9,[[],["self"]]],[11,"default","","",32,[[],["resolvedflags"]]],[11,"default","","",33,[[],["resolvedhostflags"]]],[11,"default","","",11,[[],["resolvehostdata"]]],[11,"default","","",35,[[],["self"]]],[11,"cmp","","",0,[[["self"],["class"]],["ordering"]]],[11,"cmp","","",1,[[["type"],["self"]],["ordering"]]],[11,"cmp","","",20,[[["self"],["interfaceindex"]],["ordering"]]],[11,"cmp","","",15,[[["interface"],["self"]],["ordering"]]],[11,"cmp","","",21,[[["self"],["browsedflags"]],["ordering"]]],[11,"cmp","","",2,[[["browseresult"],["self"]],["ordering"]]],[11,"cmp","","",3,[[["browsedata"],["self"]],["ordering"]]],[11,"cmp","","",22,[[["self"],["registerrecordflags"]],["ordering"]]],[11,"cmp","","",4,[[["self"],["registerrecorddata"]],["ordering"]]],[11,"cmp","","",16,[[["enumerate"],["self"]],["ordering"]]],[11,"cmp","","",25,[[["enumeratedflags"],["self"]],["ordering"]]],[11,"cmp","","",5,[[["enumerateresult"],["self"]],["ordering"]]],[11,"cmp","","",26,[[["queryrecordflags"],["self"]],["ordering"]]],[11,"cmp","","",27,[[["queriedrecordflags"],["self"]],["ordering"]]],[11,"cmp","","",6,[[["self"],["queryrecordresult"]],["ordering"]]],[11,"cmp","","",7,[[["queryrecorddata"],["self"]],["ordering"]]],[11,"cmp","","",29,[[["registerflags"],["self"]],["ordering"]]],[11,"cmp","","",8,[[["registerresult"],["self"]],["ordering"]]],[11,"cmp","","",9,[[["registerdata"],["self"]],["ordering"]]],[11,"cmp","","",32,[[["self"],["resolvedflags"]],["ordering"]]],[11,"cmp","","",10,[[["self"],["resolveresult"]],["ordering"]]],[11,"cmp","","",33,[[["resolvedhostflags"],["self"]],["ordering"]]],[11,"cmp","","",11,[[["self"],["resolvehostdata"]],["ordering"]]],[11,"cmp","","",12,[[["resolvehostresult"],["self"]],["ordering"]]],[11,"cmp","","",17,[[["self"],["scopedsocketaddr"]],["ordering"]]],[11,"cmp","","",19,[[["txtrecorderror"],["self"]],["ordering"]]],[11,"eq","","",0,[[["self"],["class"]],["bool"]]],[11,"ne","","",0,[[["self"],["class"]],["bool"]]],[11,"eq","","",1,[[["type"],["self"]],["bool"]]],[11,"ne","","",1,[[["type"],["self"]],["bool"]]],[11,"eq","","",20,[[["self"],["interfaceindex"]],["bool"]]],[11,"ne","","",20,[[["self"],["interfaceindex"]],["bool"]]],[11,"eq","","",15,[[["interface"],["self"]],["bool"]]],[11,"ne","","",15,[[["interface"],["self"]],["bool"]]],[11,"eq","","",21,[[["self"],["browsedflags"]],["bool"]]],[11,"ne","","",21,[[["self"],["browsedflags"]],["bool"]]],[11,"eq","","",2,[[["browseresult"],["self"]],["bool"]]],[11,"ne","","",2,[[["browseresult"],["self"]],["bool"]]],[11,"eq","","",3,[[["browsedata"],["self"]],["bool"]]],[11,"ne","","",3,[[["browsedata"],["self"]],["bool"]]],[11,"eq","","",22,[[["self"],["registerrecordflags"]],["bool"]]],[11,"ne","","",22,[[["self"],["registerrecordflags"]],["bool"]]],[11,"eq","","",4,[[["self"],["registerrecorddata"]],["bool"]]],[11,"ne","","",4,[[["self"],["registerrecorddata"]],["bool"]]],[11,"eq","","",16,[[["enumerate"],["self"]],["bool"]]],[11,"eq","","",25,[[["enumeratedflags"],["self"]],["bool"]]],[11,"ne","","",25,[[["enumeratedflags"],["self"]],["bool"]]],[11,"eq","","",5,[[["enumerateresult"],["self"]],["bool"]]],[11,"ne","","",5,[[["enumerateresult"],["self"]],["bool"]]],[11,"eq","","",26,[[["queryrecordflags"],["self"]],["bool"]]],[11,"ne","","",26,[[["queryrecordflags"],["self"]],["bool"]]],[11,"eq","","",27,[[["queriedrecordflags"],["self"]],["bool"]]],[11,"ne","","",27,[[["queriedrecordflags"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["queryrecordresult"]],["bool"]]],[11,"ne","","",6,[[["self"],["queryrecordresult"]],["bool"]]],[11,"eq","","",7,[[["queryrecorddata"],["self"]],["bool"]]],[11,"ne","","",7,[[["queryrecorddata"],["self"]],["bool"]]],[11,"eq","","",29,[[["registerflags"],["self"]],["bool"]]],[11,"ne","","",29,[[["registerflags"],["self"]],["bool"]]],[11,"eq","","",8,[[["registerresult"],["self"]],["bool"]]],[11,"ne","","",8,[[["registerresult"],["self"]],["bool"]]],[11,"eq","","",9,[[["registerdata"],["self"]],["bool"]]],[11,"ne","","",9,[[["registerdata"],["self"]],["bool"]]],[11,"eq","","",32,[[["self"],["resolvedflags"]],["bool"]]],[11,"ne","","",32,[[["self"],["resolvedflags"]],["bool"]]],[11,"eq","","",10,[[["self"],["resolveresult"]],["bool"]]],[11,"ne","","",10,[[["self"],["resolveresult"]],["bool"]]],[11,"eq","","",33,[[["resolvedhostflags"],["self"]],["bool"]]],[11,"ne","","",33,[[["resolvedhostflags"],["self"]],["bool"]]],[11,"eq","","",11,[[["self"],["resolvehostdata"]],["bool"]]],[11,"ne","","",11,[[["self"],["resolvehostdata"]],["bool"]]],[11,"eq","","",12,[[["resolvehostresult"],["self"]],["bool"]]],[11,"ne","","",12,[[["resolvehostresult"],["self"]],["bool"]]],[11,"eq","","",17,[[["self"],["scopedsocketaddr"]],["bool"]]],[11,"ne","","",17,[[["self"],["scopedsocketaddr"]],["bool"]]],[11,"eq","","",19,[[["txtrecorderror"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["class"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",0,[[["self"],["class"]],["bool"]]],[11,"le","","",0,[[["self"],["class"]],["bool"]]],[11,"gt","","",0,[[["self"],["class"]],["bool"]]],[11,"ge","","",0,[[["self"],["class"]],["bool"]]],[11,"partial_cmp","","",1,[[["type"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",1,[[["type"],["self"]],["bool"]]],[11,"le","","",1,[[["type"],["self"]],["bool"]]],[11,"gt","","",1,[[["type"],["self"]],["bool"]]],[11,"ge","","",1,[[["type"],["self"]],["bool"]]],[11,"partial_cmp","","",20,[[["self"],["interfaceindex"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",20,[[["self"],["interfaceindex"]],["bool"]]],[11,"le","","",20,[[["self"],["interfaceindex"]],["bool"]]],[11,"gt","","",20,[[["self"],["interfaceindex"]],["bool"]]],[11,"ge","","",20,[[["self"],["interfaceindex"]],["bool"]]],[11,"partial_cmp","","",15,[[["interface"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",15,[[["interface"],["self"]],["bool"]]],[11,"le","","",15,[[["interface"],["self"]],["bool"]]],[11,"gt","","",15,[[["interface"],["self"]],["bool"]]],[11,"ge","","",15,[[["interface"],["self"]],["bool"]]],[11,"partial_cmp","","",21,[[["self"],["browsedflags"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",21,[[["self"],["browsedflags"]],["bool"]]],[11,"le","","",21,[[["self"],["browsedflags"]],["bool"]]],[11,"gt","","",21,[[["self"],["browsedflags"]],["bool"]]],[11,"ge","","",21,[[["self"],["browsedflags"]],["bool"]]],[11,"partial_cmp","","",2,[[["browseresult"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",2,[[["browseresult"],["self"]],["bool"]]],[11,"le","","",2,[[["browseresult"],["self"]],["bool"]]],[11,"gt","","",2,[[["browseresult"],["self"]],["bool"]]],[11,"ge","","",2,[[["browseresult"],["self"]],["bool"]]],[11,"partial_cmp","","",3,[[["browsedata"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",3,[[["browsedata"],["self"]],["bool"]]],[11,"le","","",3,[[["browsedata"],["self"]],["bool"]]],[11,"gt","","",3,[[["browsedata"],["self"]],["bool"]]],[11,"ge","","",3,[[["browsedata"],["self"]],["bool"]]],[11,"partial_cmp","","",22,[[["self"],["registerrecordflags"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",22,[[["self"],["registerrecordflags"]],["bool"]]],[11,"le","","",22,[[["self"],["registerrecordflags"]],["bool"]]],[11,"gt","","",22,[[["self"],["registerrecordflags"]],["bool"]]],[11,"ge","","",22,[[["self"],["registerrecordflags"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["registerrecorddata"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",4,[[["self"],["registerrecorddata"]],["bool"]]],[11,"le","","",4,[[["self"],["registerrecorddata"]],["bool"]]],[11,"gt","","",4,[[["self"],["registerrecorddata"]],["bool"]]],[11,"ge","","",4,[[["self"],["registerrecorddata"]],["bool"]]],[11,"partial_cmp","","",16,[[["enumerate"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",25,[[["enumeratedflags"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",25,[[["enumeratedflags"],["self"]],["bool"]]],[11,"le","","",25,[[["enumeratedflags"],["self"]],["bool"]]],[11,"gt","","",25,[[["enumeratedflags"],["self"]],["bool"]]],[11,"ge","","",25,[[["enumeratedflags"],["self"]],["bool"]]],[11,"partial_cmp","","",5,[[["enumerateresult"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",5,[[["enumerateresult"],["self"]],["bool"]]],[11,"le","","",5,[[["enumerateresult"],["self"]],["bool"]]],[11,"gt","","",5,[[["enumerateresult"],["self"]],["bool"]]],[11,"ge","","",5,[[["enumerateresult"],["self"]],["bool"]]],[11,"partial_cmp","","",26,[[["queryrecordflags"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",26,[[["queryrecordflags"],["self"]],["bool"]]],[11,"le","","",26,[[["queryrecordflags"],["self"]],["bool"]]],[11,"gt","","",26,[[["queryrecordflags"],["self"]],["bool"]]],[11,"ge","","",26,[[["queryrecordflags"],["self"]],["bool"]]],[11,"partial_cmp","","",27,[[["queriedrecordflags"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",27,[[["queriedrecordflags"],["self"]],["bool"]]],[11,"le","","",27,[[["queriedrecordflags"],["self"]],["bool"]]],[11,"gt","","",27,[[["queriedrecordflags"],["self"]],["bool"]]],[11,"ge","","",27,[[["queriedrecordflags"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["queryrecordresult"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",6,[[["self"],["queryrecordresult"]],["bool"]]],[11,"le","","",6,[[["self"],["queryrecordresult"]],["bool"]]],[11,"gt","","",6,[[["self"],["queryrecordresult"]],["bool"]]],[11,"ge","","",6,[[["self"],["queryrecordresult"]],["bool"]]],[11,"partial_cmp","","",7,[[["queryrecorddata"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",7,[[["queryrecorddata"],["self"]],["bool"]]],[11,"le","","",7,[[["queryrecorddata"],["self"]],["bool"]]],[11,"gt","","",7,[[["queryrecorddata"],["self"]],["bool"]]],[11,"ge","","",7,[[["queryrecorddata"],["self"]],["bool"]]],[11,"partial_cmp","","",29,[[["registerflags"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",29,[[["registerflags"],["self"]],["bool"]]],[11,"le","","",29,[[["registerflags"],["self"]],["bool"]]],[11,"gt","","",29,[[["registerflags"],["self"]],["bool"]]],[11,"ge","","",29,[[["registerflags"],["self"]],["bool"]]],[11,"partial_cmp","","",8,[[["registerresult"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",8,[[["registerresult"],["self"]],["bool"]]],[11,"le","","",8,[[["registerresult"],["self"]],["bool"]]],[11,"gt","","",8,[[["registerresult"],["self"]],["bool"]]],[11,"ge","","",8,[[["registerresult"],["self"]],["bool"]]],[11,"partial_cmp","","",9,[[["registerdata"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",9,[[["registerdata"],["self"]],["bool"]]],[11,"le","","",9,[[["registerdata"],["self"]],["bool"]]],[11,"gt","","",9,[[["registerdata"],["self"]],["bool"]]],[11,"ge","","",9,[[["registerdata"],["self"]],["bool"]]],[11,"partial_cmp","","",32,[[["self"],["resolvedflags"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",32,[[["self"],["resolvedflags"]],["bool"]]],[11,"le","","",32,[[["self"],["resolvedflags"]],["bool"]]],[11,"gt","","",32,[[["self"],["resolvedflags"]],["bool"]]],[11,"ge","","",32,[[["self"],["resolvedflags"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["resolveresult"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",10,[[["self"],["resolveresult"]],["bool"]]],[11,"le","","",10,[[["self"],["resolveresult"]],["bool"]]],[11,"gt","","",10,[[["self"],["resolveresult"]],["bool"]]],[11,"ge","","",10,[[["self"],["resolveresult"]],["bool"]]],[11,"partial_cmp","","",33,[[["resolvedhostflags"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",33,[[["resolvedhostflags"],["self"]],["bool"]]],[11,"le","","",33,[[["resolvedhostflags"],["self"]],["bool"]]],[11,"gt","","",33,[[["resolvedhostflags"],["self"]],["bool"]]],[11,"ge","","",33,[[["resolvedhostflags"],["self"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["resolvehostdata"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",11,[[["self"],["resolvehostdata"]],["bool"]]],[11,"le","","",11,[[["self"],["resolvehostdata"]],["bool"]]],[11,"gt","","",11,[[["self"],["resolvehostdata"]],["bool"]]],[11,"ge","","",11,[[["self"],["resolvehostdata"]],["bool"]]],[11,"partial_cmp","","",12,[[["resolvehostresult"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",12,[[["resolvehostresult"],["self"]],["bool"]]],[11,"le","","",12,[[["resolvehostresult"],["self"]],["bool"]]],[11,"gt","","",12,[[["resolvehostresult"],["self"]],["bool"]]],[11,"ge","","",12,[[["resolvehostresult"],["self"]],["bool"]]],[11,"partial_cmp","","",17,[[["self"],["scopedsocketaddr"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",17,[[["self"],["scopedsocketaddr"]],["bool"]]],[11,"le","","",17,[[["self"],["scopedsocketaddr"]],["bool"]]],[11,"gt","","",17,[[["self"],["scopedsocketaddr"]],["bool"]]],[11,"ge","","",17,[[["self"],["scopedsocketaddr"]],["bool"]]],[11,"partial_cmp","","",19,[[["txtrecorderror"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"sub","","Returns the set difference of the two sets of flags.",21,[[["browsedflags"]],["browsedflags"]]],[11,"sub","","Returns the set difference of the two sets of flags.",22,[[["registerrecordflags"]],["registerrecordflags"]]],[11,"sub","","Returns the set difference of the two sets of flags.",25,[[["enumeratedflags"]],["enumeratedflags"]]],[11,"sub","","Returns the set difference of the two sets of flags.",26,[[["queryrecordflags"]],["queryrecordflags"]]],[11,"sub","","Returns the set difference of the two sets of flags.",27,[[["queriedrecordflags"]],["queriedrecordflags"]]],[11,"sub","","Returns the set difference of the two sets of flags.",29,[[["registerflags"]],["registerflags"]]],[11,"sub","","Returns the set difference of the two sets of flags.",32,[[["resolvedflags"]],["resolvedflags"]]],[11,"sub","","Returns the set difference of the two sets of flags.",33,[[["resolvedhostflags"]],["resolvedhostflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",21,[[["self"],["browsedflags"]]]],[11,"sub_assign","","Disables all flags enabled in the set.",22,[[["self"],["registerrecordflags"]]]],[11,"sub_assign","","Disables all flags enabled in the set.",25,[[["enumeratedflags"],["self"]]]],[11,"sub_assign","","Disables all flags enabled in the set.",26,[[["self"],["queryrecordflags"]]]],[11,"sub_assign","","Disables all flags enabled in the set.",27,[[["queriedrecordflags"],["self"]]]],[11,"sub_assign","","Disables all flags enabled in the set.",29,[[["self"],["registerflags"]]]],[11,"sub_assign","","Disables all flags enabled in the set.",32,[[["resolvedflags"],["self"]]]],[11,"sub_assign","","Disables all flags enabled in the set.",33,[[["self"],["resolvedhostflags"]]]],[11,"not","","Returns the complement of this set of flags.",21,[[],["browsedflags"]]],[11,"not","","Returns the complement of this set of flags.",22,[[],["registerrecordflags"]]],[11,"not","","Returns the complement of this set of flags.",25,[[],["enumeratedflags"]]],[11,"not","","Returns the complement of this set of flags.",26,[[],["queryrecordflags"]]],[11,"not","","Returns the complement of this set of flags.",27,[[],["queriedrecordflags"]]],[11,"not","","Returns the complement of this set of flags.",29,[[],["registerflags"]]],[11,"not","","Returns the complement of this set of flags.",32,[[],["resolvedflags"]]],[11,"not","","Returns the complement of this set of flags.",33,[[],["resolvedhostflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",21,[[["browsedflags"]],["browsedflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",22,[[["registerrecordflags"]],["registerrecordflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",25,[[["enumeratedflags"]],["enumeratedflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",26,[[["queryrecordflags"]],["queryrecordflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",27,[[["queriedrecordflags"]],["queriedrecordflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",29,[[["registerflags"]],["registerflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",32,[[["resolvedflags"]],["resolvedflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",33,[[["resolvedhostflags"]],["resolvedhostflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",21,[[["browsedflags"]],["browsedflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",22,[[["registerrecordflags"]],["registerrecordflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",25,[[["enumeratedflags"]],["enumeratedflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",26,[[["queryrecordflags"]],["queryrecordflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",27,[[["queriedrecordflags"]],["queriedrecordflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",29,[[["registerflags"]],["registerflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",32,[[["resolvedflags"]],["resolvedflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",33,[[["resolvedhostflags"]],["resolvedhostflags"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",21,[[["browsedflags"]],["browsedflags"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",22,[[["registerrecordflags"]],["registerrecordflags"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",25,[[["enumeratedflags"]],["enumeratedflags"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",26,[[["queryrecordflags"]],["queryrecordflags"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",27,[[["queriedrecordflags"]],["queriedrecordflags"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",29,[[["registerflags"]],["registerflags"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",32,[[["resolvedflags"]],["resolvedflags"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",33,[[["resolvedhostflags"]],["resolvedhostflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",21,[[["self"],["browsedflags"]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",22,[[["self"],["registerrecordflags"]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",25,[[["enumeratedflags"],["self"]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",26,[[["self"],["queryrecordflags"]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",27,[[["queriedrecordflags"],["self"]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",29,[[["self"],["registerflags"]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",32,[[["resolvedflags"],["self"]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",33,[[["self"],["resolvedhostflags"]]]],[11,"bitor_assign","","Adds the set of flags.",21,[[["self"],["browsedflags"]]]],[11,"bitor_assign","","Adds the set of flags.",22,[[["self"],["registerrecordflags"]]]],[11,"bitor_assign","","Adds the set of flags.",25,[[["enumeratedflags"],["self"]]]],[11,"bitor_assign","","Adds the set of flags.",26,[[["self"],["queryrecordflags"]]]],[11,"bitor_assign","","Adds the set of flags.",27,[[["queriedrecordflags"],["self"]]]],[11,"bitor_assign","","Adds the set of flags.",29,[[["self"],["registerflags"]]]],[11,"bitor_assign","","Adds the set of flags.",32,[[["resolvedflags"],["self"]]]],[11,"bitor_assign","","Adds the set of flags.",33,[[["self"],["resolvedhostflags"]]]],[11,"bitxor_assign","","Toggles the set of flags.",21,[[["self"],["browsedflags"]]]],[11,"bitxor_assign","","Toggles the set of flags.",22,[[["self"],["registerrecordflags"]]]],[11,"bitxor_assign","","Toggles the set of flags.",25,[[["enumeratedflags"],["self"]]]],[11,"bitxor_assign","","Toggles the set of flags.",26,[[["self"],["queryrecordflags"]]]],[11,"bitxor_assign","","Toggles the set of flags.",27,[[["queriedrecordflags"],["self"]]]],[11,"bitxor_assign","","Toggles the set of flags.",29,[[["self"],["registerflags"]]]],[11,"bitxor_assign","","Toggles the set of flags.",32,[[["resolvedflags"],["self"]]]],[11,"bitxor_assign","","Toggles the set of flags.",33,[[["self"],["resolvedhostflags"]]]],[11,"hash","","",0,[[["self"],["__h"]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"hash","","",20,[[["self"],["__h"]]]],[11,"hash","","",15,[[["self"],["__h"]]]],[11,"hash","","",21,[[["self"],["__h"]]]],[11,"hash","","",2,[[["self"],["__h"]]]],[11,"hash","","",3,[[["self"],["__h"]]]],[11,"hash","","",22,[[["self"],["__h"]]]],[11,"hash","","",4,[[["self"],["__h"]]]],[11,"hash","","",16,[[["self"],["__h"]]]],[11,"hash","","",25,[[["self"],["__h"]]]],[11,"hash","","",5,[[["self"],["__h"]]]],[11,"hash","","",26,[[["self"],["__h"]]]],[11,"hash","","",27,[[["self"],["__h"]]]],[11,"hash","","",6,[[["self"],["__h"]]]],[11,"hash","","",7,[[["self"],["__h"]]]],[11,"hash","","",29,[[["self"],["__h"]]]],[11,"hash","","",8,[[["self"],["__h"]]]],[11,"hash","","",9,[[["self"],["__h"]]]],[11,"hash","","",32,[[["self"],["__h"]]]],[11,"hash","","",10,[[["self"],["__h"]]]],[11,"hash","","",33,[[["self"],["__h"]]]],[11,"hash","","",11,[[["self"],["__h"]]]],[11,"hash","","",12,[[["self"],["__h"]]]],[11,"hash","","",17,[[["self"],["__h"]]]],[11,"hash","","",19,[[["self"],["__h"]]]],[11,"from_iter","","",21,[[["intoiterator"]],["browsedflags"]]],[11,"from_iter","","",22,[[["intoiterator"]],["registerrecordflags"]]],[11,"from_iter","","",25,[[["intoiterator"]],["enumeratedflags"]]],[11,"from_iter","","",26,[[["intoiterator"]],["queryrecordflags"]]],[11,"from_iter","","",27,[[["intoiterator"]],["queriedrecordflags"]]],[11,"from_iter","","",29,[[["intoiterator"]],["registerflags"]]],[11,"from_iter","","",32,[[["intoiterator"]],["resolvedflags"]]],[11,"from_iter","","",33,[[["intoiterator"]],["resolvedhostflags"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",32,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",32,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",32,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",32,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",33,[[["formatter"],["self"]],["result"]]],[11,"poll","","",24,[[["context"],["self"],["pin"]],["poll"]]],[11,"poll","","",31,[[["context"],["self"],["pin"]],["poll"]]],[11,"poll_next","","",37,[[["context"],["self"],["pin"]],[["poll",["option"]],["option"]]]],[11,"poll_next","","",38,[[["context"],["self"],["pin"]],[["poll",["option"]],["option"]]]],[11,"poll_next","","",39,[[["context"],["self"],["pin"]],[["poll",["option"]],["option"]]]],[11,"poll_next","","",40,[[["context"],["self"],["pin"]],[["poll",["option"]],["option"]]]],[11,"poll_next","","",41,[[["context"],["self"],["pin"]],[["poll",["option"]],["option"]]]],[11,"poll_next","","",34,[[["context"],["self"],["pin"]],[["poll",["option"]],["option"]]]]],"p":[[3,"Class"],[3,"Type"],[3,"BrowseResult"],[3,"BrowseData"],[3,"RegisterRecordData"],[3,"EnumerateResult"],[3,"QueryRecordResult"],[3,"QueryRecordData"],[3,"RegisterResult"],[3,"RegisterData"],[3,"ResolveResult"],[3,"ResolveHostData"],[3,"ResolveHostResult"],[3,"FullName"],[4,"Error"],[4,"Interface"],[4,"Enumerate"],[4,"ScopedSocketAddr"],[4,"TimeoutStreamError"],[4,"TxtRecordError"],[3,"InterfaceIndex"],[3,"BrowsedFlags"],[3,"RegisterRecordFlags"],[3,"Connection"],[3,"RegisterRecord"],[3,"EnumeratedFlags"],[3,"QueryRecordFlags"],[3,"QueriedRecordFlags"],[3,"Record"],[3,"RegisterFlags"],[3,"Registration"],[3,"Register"],[3,"ResolvedFlags"],[3,"ResolvedHostFlags"],[3,"TimeoutStream"],[3,"TxtRecord"],[8,"StreamTimeoutExt"],[3,"Browse"],[3,"EnumerateDomains"],[3,"QueryRecord"],[3,"Resolve"],[3,"ResolveHost"],[3,"TxtRecordIter"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);